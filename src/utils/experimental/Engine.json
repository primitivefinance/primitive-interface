{
  "address": "0x20E42bB1a3174d931691d77c4CFe1a116F1415bB",
  "abi": [
  {
  "inputs": [
  {
  "internalType": "address",
  "name": "risky",
  "type": "address"
  },
  {
  "internalType": "address",
  "name": "riskFree",
  "type": "address"
  }
  ],
  "stateMutability": "nonpayable",
  "type": "constructor"
  },
  {
  "anonymous": false,
  "inputs": [
  {
  "indexed": true,
  "internalType": "address",
  "name": "from",
  "type": "address"
  },
  {
  "indexed": true,
  "internalType": "uint256",
  "name": "nonce",
  "type": "uint256"
  },
  {
  "indexed": false,
  "internalType": "uint256",
  "name": "deltaX",
  "type": "uint256"
  },
  {
  "indexed": false,
  "internalType": "uint256",
  "name": "deltaY",
  "type": "uint256"
  }
  ],
  "name": "AddedBoth",
  "type": "event"
  },
  {
  "anonymous": false,
  "inputs": [
  {
  "indexed": true,
  "internalType": "address",
  "name": "from",
  "type": "address"
  },
  {
  "indexed": true,
  "internalType": "uint256",
  "name": "nonce",
  "type": "uint256"
  },
  {
  "indexed": false,
  "internalType": "uint256",
  "name": "deltaX",
  "type": "uint256"
  },
  {
  "indexed": false,
  "internalType": "uint256",
  "name": "deltaY",
  "type": "uint256"
  }
  ],
  "name": "AddedX",
  "type": "event"
  },
  {
  "anonymous": false,
  "inputs": [
  {
  "indexed": true,
  "internalType": "address",
  "name": "from",
  "type": "address"
  },
  {
  "components": [
  {
  "internalType": "address",
  "name": "owner",
  "type": "address"
  },
  {
  "internalType": "uint256",
  "name": "nonce",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "BX1",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "BY2",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "liquidity",
  "type": "uint256"
  },
  {
  "internalType": "bool",
  "name": "unlocked",
  "type": "bool"
  }
  ],
  "indexed": false,
  "internalType": "struct PrimitiveEngine.Position",
  "name": "pos",
  "type": "tuple"
  }
  ],
  "name": "PositionUpdated",
  "type": "event"
  },
  {
  "anonymous": false,
  "inputs": [
  {
  "indexed": true,
  "internalType": "address",
  "name": "from",
  "type": "address"
  },
  {
  "indexed": true,
  "internalType": "uint256",
  "name": "nonce",
  "type": "uint256"
  },
  {
  "indexed": false,
  "internalType": "uint256",
  "name": "deltaX",
  "type": "uint256"
  },
  {
  "indexed": false,
  "internalType": "uint256",
  "name": "deltaY",
  "type": "uint256"
  }
  ],
  "name": "RemovedBoth",
  "type": "event"
  },
  {
  "anonymous": false,
  "inputs": [
  {
  "indexed": true,
  "internalType": "address",
  "name": "from",
  "type": "address"
  },
  {
  "indexed": true,
  "internalType": "uint256",
  "name": "nonce",
  "type": "uint256"
  },
  {
  "indexed": false,
  "internalType": "uint256",
  "name": "deltaX",
  "type": "uint256"
  },
  {
  "indexed": false,
  "internalType": "uint256",
  "name": "deltaY",
  "type": "uint256"
  }
  ],
  "name": "RemovedX",
  "type": "event"
  },
  {
  "anonymous": false,
  "inputs": [
  {
  "indexed": false,
  "internalType": "uint256",
  "name": "R1",
  "type": "uint256"
  },
  {
  "indexed": false,
  "internalType": "uint256",
  "name": "R2",
  "type": "uint256"
  },
  {
  "indexed": false,
  "internalType": "uint256",
  "name": "blockNumber",
  "type": "uint256"
  }
  ],
  "name": "Update",
  "type": "event"
  },
  {
  "inputs": [],
  "name": "FEE",
  "outputs": [
  {
  "internalType": "uint256",
  "name": "",
  "type": "uint256"
  }
  ],
  "stateMutability": "view",
  "type": "function"
  },
  {
  "inputs": [],
  "name": "INIT_SUPPLY",
  "outputs": [
  {
  "internalType": "uint256",
  "name": "",
  "type": "uint256"
  }
  ],
  "stateMutability": "view",
  "type": "function"
  },
  {
  "inputs": [],
  "name": "TX1",
  "outputs": [
  {
  "internalType": "address",
  "name": "",
  "type": "address"
  }
  ],
  "stateMutability": "view",
  "type": "function"
  },
  {
  "inputs": [],
  "name": "TY2",
  "outputs": [
  {
  "internalType": "address",
  "name": "",
  "type": "address"
  }
  ],
  "stateMutability": "view",
  "type": "function"
  },
  {
  "inputs": [
  {
  "internalType": "uint256",
  "name": "deltaX",
  "type": "uint256"
  }
  ],
  "name": "_getInputR2",
  "outputs": [
  {
  "internalType": "int128",
  "name": "",
  "type": "int128"
  }
  ],
  "stateMutability": "view",
  "type": "function"
  },
  {
  "inputs": [
  {
  "internalType": "uint256",
  "name": "deltaX",
  "type": "uint256"
  }
  ],
  "name": "_getInputR2Scaled",
  "outputs": [
  {
  "internalType": "uint256",
  "name": "",
  "type": "uint256"
  }
  ],
  "stateMutability": "view",
  "type": "function"
  },
  {
  "inputs": [
  {
  "internalType": "uint256",
  "name": "deltaX",
  "type": "uint256"
  }
  ],
  "name": "_getOutputR2",
  "outputs": [
  {
  "internalType": "int128",
  "name": "",
  "type": "int128"
  }
  ],
  "stateMutability": "view",
  "type": "function"
  },
  {
  "inputs": [
  {
  "internalType": "uint256",
  "name": "deltaX",
  "type": "uint256"
  }
  ],
  "name": "_getOutputR2Scaled",
  "outputs": [
  {
  "internalType": "uint256",
  "name": "",
  "type": "uint256"
  }
  ],
  "stateMutability": "view",
  "type": "function"
  },
  {
  "inputs": [
  {
  "internalType": "uint256",
  "name": "postR1",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "postR2",
  "type": "uint256"
  }
  ],
  "name": "_update",
  "outputs": [],
  "stateMutability": "nonpayable",
  "type": "function"
  },
  {
  "inputs": [],
  "name": "accumulator",
  "outputs": [
  {
  "internalType": "uint256",
  "name": "ARX1",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "ARX2",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "blockNumberLast",
  "type": "uint256"
  }
  ],
  "stateMutability": "view",
  "type": "function"
  },
  {
  "inputs": [],
  "name": "activePosition",
  "outputs": [
  {
  "internalType": "address",
  "name": "owner",
  "type": "address"
  },
  {
  "internalType": "uint256",
  "name": "nonce",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "BX1",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "BY2",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "liquidity",
  "type": "uint256"
  },
  {
  "internalType": "bool",
  "name": "unlocked",
  "type": "bool"
  }
  ],
  "stateMutability": "view",
  "type": "function"
  },
  {
  "inputs": [
  {
  "internalType": "address",
  "name": "owner",
  "type": "address"
  },
  {
  "internalType": "uint256",
  "name": "nonce",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "deltaL",
  "type": "uint256"
  }
  ],
  "name": "addBoth",
  "outputs": [
  {
  "internalType": "uint256",
  "name": "",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "",
  "type": "uint256"
  }
  ],
  "stateMutability": "nonpayable",
  "type": "function"
  },
  {
  "inputs": [
  {
  "internalType": "address",
  "name": "owner",
  "type": "address"
  },
  {
  "internalType": "uint256",
  "name": "nonce",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "deltaX",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "minDeltaY",
  "type": "uint256"
  }
  ],
  "name": "addX",
  "outputs": [
  {
  "internalType": "uint256",
  "name": "",
  "type": "uint256"
  }
  ],
  "stateMutability": "nonpayable",
  "type": "function"
  },
  {
  "inputs": [],
  "name": "calibration",
  "outputs": [
  {
  "internalType": "uint256",
  "name": "strike",
  "type": "uint256"
  },
  {
  "internalType": "uint32",
  "name": "sigma",
  "type": "uint32"
  },
  {
  "internalType": "uint32",
  "name": "time",
  "type": "uint32"
  }
  ],
  "stateMutability": "view",
  "type": "function"
  },
  {
  "inputs": [],
  "name": "capital",
  "outputs": [
  {
  "internalType": "uint256",
  "name": "RX1",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "RX2",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "liquidity",
  "type": "uint256"
  }
  ],
  "stateMutability": "view",
  "type": "function"
  },
  {
  "inputs": [
  {
  "internalType": "address",
  "name": "owner",
  "type": "address"
  },
  {
  "internalType": "uint256",
  "name": "nonce",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "deltaX",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "deltaY",
  "type": "uint256"
  }
  ],
  "name": "directDeposit",
  "outputs": [
  {
  "internalType": "bool",
  "name": "",
  "type": "bool"
  }
  ],
  "stateMutability": "nonpayable",
  "type": "function"
  },
  {
  "inputs": [
  {
  "internalType": "address",
  "name": "owner",
  "type": "address"
  },
  {
  "internalType": "uint256",
  "name": "nonce",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "deltaX",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "deltaY",
  "type": "uint256"
  }
  ],
  "name": "directWithdrawal",
  "outputs": [
  {
  "internalType": "bool",
  "name": "",
  "type": "bool"
  }
  ],
  "stateMutability": "nonpayable",
  "type": "function"
  },
  {
  "inputs": [],
  "name": "getAccumulator",
  "outputs": [
  {
  "components": [
  {
  "internalType": "uint256",
  "name": "ARX1",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "ARX2",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "blockNumberLast",
  "type": "uint256"
  }
  ],
  "internalType": "struct PrimitiveEngine.Accumulator",
  "name": "",
  "type": "tuple"
  }
  ],
  "stateMutability": "view",
  "type": "function"
  },
  {
  "inputs": [],
  "name": "getBX1",
  "outputs": [
  {
  "internalType": "uint256",
  "name": "",
  "type": "uint256"
  }
  ],
  "stateMutability": "view",
  "type": "function"
  },
  {
  "inputs": [],
  "name": "getBY2",
  "outputs": [
  {
  "internalType": "uint256",
  "name": "",
  "type": "uint256"
  }
  ],
  "stateMutability": "view",
  "type": "function"
  },
  {
  "inputs": [
  {
  "internalType": "uint256",
  "name": "x",
  "type": "uint256"
  }
  ],
  "name": "getCDF",
  "outputs": [
  {
  "internalType": "int128",
  "name": "",
  "type": "int128"
  }
  ],
  "stateMutability": "view",
  "type": "function"
  },
  {
  "inputs": [],
  "name": "getCalibration",
  "outputs": [
  {
  "components": [
  {
  "internalType": "uint256",
  "name": "strike",
  "type": "uint256"
  },
  {
  "internalType": "uint32",
  "name": "sigma",
  "type": "uint32"
  },
  {
  "internalType": "uint32",
  "name": "time",
  "type": "uint32"
  }
  ],
  "internalType": "struct PrimitiveEngine.Calibration",
  "name": "",
  "type": "tuple"
  }
  ],
  "stateMutability": "view",
  "type": "function"
  },
  {
  "inputs": [],
  "name": "getCapital",
  "outputs": [
  {
  "components": [
  {
  "internalType": "uint256",
  "name": "RX1",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "RX2",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "liquidity",
  "type": "uint256"
  }
  ],
  "internalType": "struct PrimitiveEngine.Capital",
  "name": "",
  "type": "tuple"
  }
  ],
  "stateMutability": "view",
  "type": "function"
  },
  {
  "inputs": [
  {
  "internalType": "uint256",
  "name": "deltaX",
  "type": "uint256"
  }
  ],
  "name": "getInputAmount",
  "outputs": [
  {
  "internalType": "uint256",
  "name": "",
  "type": "uint256"
  }
  ],
  "stateMutability": "view",
  "type": "function"
  },
  {
  "inputs": [
  {
  "internalType": "uint256",
  "name": "postR1",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "postR2",
  "type": "uint256"
  }
  ],
  "name": "getInvariant",
  "outputs": [
  {
  "internalType": "int128",
  "name": "",
  "type": "int128"
  }
  ],
  "stateMutability": "view",
  "type": "function"
  },
  {
  "inputs": [
  {
  "internalType": "uint256",
  "name": "deltaX",
  "type": "uint256"
  }
  ],
  "name": "getOutputAmount",
  "outputs": [
  {
  "internalType": "uint256",
  "name": "",
  "type": "uint256"
  }
  ],
  "stateMutability": "view",
  "type": "function"
  },
  {
  "inputs": [
  {
  "internalType": "address",
  "name": "owner",
  "type": "address"
  },
  {
  "internalType": "uint256",
  "name": "nonce",
  "type": "uint256"
  }
  ],
  "name": "getPosition",
  "outputs": [
  {
  "components": [
  {
  "internalType": "address",
  "name": "owner",
  "type": "address"
  },
  {
  "internalType": "uint256",
  "name": "nonce",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "BX1",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "BY2",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "liquidity",
  "type": "uint256"
  },
  {
  "internalType": "bool",
  "name": "unlocked",
  "type": "bool"
  }
  ],
  "internalType": "struct PrimitiveEngine.Position",
  "name": "",
  "type": "tuple"
  }
  ],
  "stateMutability": "view",
  "type": "function"
  },
  {
  "inputs": [
  {
  "internalType": "uint256",
  "name": "strike_",
  "type": "uint256"
  },
  {
  "internalType": "uint32",
  "name": "sigma_",
  "type": "uint32"
  },
  {
  "internalType": "uint32",
  "name": "time_",
  "type": "uint32"
  }
  ],
  "name": "initialize",
  "outputs": [],
  "stateMutability": "nonpayable",
  "type": "function"
  },
  {
  "inputs": [],
  "name": "invariantLast",
  "outputs": [
  {
  "internalType": "int128",
  "name": "",
  "type": "int128"
  }
  ],
  "stateMutability": "view",
  "type": "function"
  },
  {
  "inputs": [
  {
  "internalType": "bytes32",
  "name": "",
  "type": "bytes32"
  }
  ],
  "name": "positions",
  "outputs": [
  {
  "internalType": "address",
  "name": "owner",
  "type": "address"
  },
  {
  "internalType": "uint256",
  "name": "nonce",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "BX1",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "BY2",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "liquidity",
  "type": "uint256"
  },
  {
  "internalType": "bool",
  "name": "unlocked",
  "type": "bool"
  }
  ],
  "stateMutability": "view",
  "type": "function"
  },
  {
  "inputs": [],
  "name": "proportionalVol",
  "outputs": [
  {
  "internalType": "int128",
  "name": "",
  "type": "int128"
  }
  ],
  "stateMutability": "view",
  "type": "function"
  },
  {
  "inputs": [
  {
  "internalType": "uint256",
  "name": "nonce",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "deltaL",
  "type": "uint256"
  }
  ],
  "name": "removeBoth",
  "outputs": [
  {
  "internalType": "uint256",
  "name": "",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "",
  "type": "uint256"
  }
  ],
  "stateMutability": "nonpayable",
  "type": "function"
  },
  {
  "inputs": [
  {
  "internalType": "address",
  "name": "owner",
  "type": "address"
  },
  {
  "internalType": "uint256",
  "name": "nonce",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "deltaX",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "maxDeltaY",
  "type": "uint256"
  }
  ],
  "name": "removeX",
  "outputs": [
  {
  "internalType": "uint256",
  "name": "",
  "type": "uint256"
  }
  ],
  "stateMutability": "nonpayable",
  "type": "function"
  },
  {
  "inputs": [
  {
  "internalType": "uint256",
  "name": "deltaX",
  "type": "uint256"
  },
  {
  "internalType": "uint256",
  "name": "deltaY",
  "type": "uint256"
  }
  ],
  "name": "start",
  "outputs": [
  {
  "internalType": "bool",
  "name": "",
  "type": "bool"
  }
  ],
  "stateMutability": "nonpayable",
  "type": "function"
  },
  {
  "inputs": [],
  "name": "tradingFunction",
  "outputs": [
  {
  "internalType": "int128",
  "name": "",
  "type": "int128"
  }
  ],
  "stateMutability": "view",
  "type": "function"
  }
  ],
  "transactionHash": "0x8e7827246bd380bfc011fca61a753f3f580139714c0f540f9c9bd0a5f2dcc3ee",
  "receipt": {
  "to": null,
  "from": "0xE7D58d8554Eb0D5B5438848Af32Bf33EbdE477E7",
  "contractAddress": "0x20E42bB1a3174d931691d77c4CFe1a116F1415bB",
  "transactionIndex": 4,
  "gasUsed": "3212075",
  "logsBloom": "0x
  "blockHash": "0xcad96ee040b05847726d55d6b8986cf487eb43243423a1f89227fd5d72fa9890",
  "transactionHash": "0x8e7827246bd380bfc011fca61a753f3f580139714c0f540f9c9bd0a5f2dcc3ee",
  "logs": [],
  "blockNumber": 24086415,
  "cumulativeGasUsed": "3737563",
  "status": 1,
  "byzantium": true
  },
  "args": [
  "0xf09A9Db4327b16A9663e46f49bDaab1A0BEC1252",
  "0xf292A6Aa8fAEfC375326AC64bA69904301bD210b"
  ],
  "solcInputHash": "9bd76d2b028c8abd6ef791d09e1ac8d1",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"risky\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"riskFree\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deltaX\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deltaY\",\"type\":\"uint256\"}],\"name\":\"AddedBoth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deltaX\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deltaY\",\"type\":\"uint256\"}],\"name\":\"AddedX\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BX1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BY2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct PrimitiveEngine.Position\",\"name\":\"pos\",\"type\":\"tuple\"}],\"name\":\"PositionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deltaX\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deltaY\",\"type\":\"uint256\"}],\"name\":\"RemovedBoth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deltaX\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deltaY\",\"type\":\"uint256\"}],\"name\":\"RemovedX\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"R1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"R2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"Update\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INIT_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TX1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TY2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deltaX\",\"type\":\"uint256\"}],\"name\":\"_getInputR2\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deltaX\",\"type\":\"uint256\"}],\"name\":\"_getInputR2Scaled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deltaX\",\"type\":\"uint256\"}],\"name\":\"_getOutputR2\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deltaX\",\"type\":\"uint256\"}],\"name\":\"_getOutputR2Scaled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"postR1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postR2\",\"type\":\"uint256\"}],\"name\":\"_update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumulator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ARX1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ARX2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumberLast\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activePosition\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BX1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BY2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deltaL\",\"type\":\"uint256\"}],\"name\":\"addBoth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deltaX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDeltaY\",\"type\":\"uint256\"}],\"name\":\"addX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calibration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"sigma\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"time\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capital\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"RX1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RX2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deltaX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deltaY\",\"type\":\"uint256\"}],\"name\":\"directDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deltaX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deltaY\",\"type\":\"uint256\"}],\"name\":\"directWithdrawal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccumulator\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ARX1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ARX2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNumberLast\",\"type\":\"uint256\"}],\"internalType\":\"struct PrimitiveEngine.Accumulator\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBX1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBY2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"getCDF\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCalibration\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"sigma\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"time\",\"type\":\"uint32\"}],\"internalType\":\"struct PrimitiveEngine.Calibration\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCapital\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"RX1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"RX2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"internalType\":\"struct PrimitiveEngine.Capital\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deltaX\",\"type\":\"uint256\"}],\"name\":\"getInputAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"postR1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postR2\",\"type\":\"uint256\"}],\"name\":\"getInvariant\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deltaX\",\"type\":\"uint256\"}],\"name\":\"getOutputAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BX1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BY2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"internalType\":\"struct PrimitiveEngine.Position\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strike_\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"sigma_\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"time_\",\"type\":\"uint32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invariantLast\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BX1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BY2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proportionalVol\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deltaL\",\"type\":\"uint256\"}],\"name\":\"removeBoth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deltaX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDeltaY\",\"type\":\"uint256\"}],\"name\":\"removeX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deltaX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deltaY\",\"type\":\"uint256\"}],\"name\":\"start\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingFunction\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addX(address,uint256,uint256,uint256)\":{\"returns\":{\"_0\":\"Amount of Y removed.\"}},\"getOutputAmount(uint256)\":{\"details\":\"R1 = x, R2 = y\"},\"removeX(address,uint256,uint256,uint256)\":{\"returns\":{\"_0\":\"Amount of Y added.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"_getInputR2(uint256)\":{\"notice\":\"Fetches a new R2 from a decreased R1.\"},\"_getOutputR2(uint256)\":{\"notice\":\"Fetches a new R2 from an increased R1. F(R1).\"},\"_update(uint256,uint256)\":{\"notice\":\"Updates R to new values for X and Y.\"},\"addX(address,uint256,uint256,uint256)\":{\"notice\":\"Updates the reserves after adding X and removing Y.\"},\"getInputAmount(uint256)\":{\"notice\":\"Fetches the amount of y which must enter the R2 to preserve the invariant.\"},\"getOutputAmount(uint256)\":{\"notice\":\"Fetches the amount of y which must leave the R2 to preserve the invariant.\"},\"removeX(address,uint256,uint256,uint256)\":{\"notice\":\"Updates the reserves after removing X and adding Y.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PrimitiveEngine.sol\":\"PrimitiveEngine\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":400},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/ABDKMath64x64.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-4-Clause\\r\\n/*\\r\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \\u00a9 2019 by ABDK Consulting.\\r\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\r\\n */\\r\\npragma solidity ^0.5.0 || ^0.6.0 || ^0.7.0;\\r\\n\\r\\n/**\\r\\n * Smart contract library of mathematical functions operating with signed\\r\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\r\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\r\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\r\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\r\\n * represented by int128 type holding only the numerator.\\r\\n */\\r\\nlibrary ABDKMath64x64 {\\r\\n  /*\\r\\n   * Minimum value signed 64.64-bit fixed point number may have. \\r\\n   */\\r\\n  int128 internal constant MIN_64x64 = -0x80000000000000000000000000000000;\\r\\n\\r\\n  /*\\r\\n   * Maximum value signed 64.64-bit fixed point number may have. \\r\\n   */\\r\\n  int128 internal constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\r\\n\\r\\n  /**\\r\\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\r\\n   * number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function fromInt (int256 x) internal pure returns (int128) {\\r\\n    require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\r\\n    return int128 (x << 64);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\\r\\n   * rounding down.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64-bit integer number\\r\\n   */\\r\\n  function toInt (int128 x) internal pure returns (int64) {\\r\\n    return int64 (x >> 64);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\r\\n   * number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function fromUInt (uint256 x) internal pure returns (int128) {\\r\\n    require (x <= 0x7FFFFFFFFFFFFFFF);\\r\\n    return int128 (x << 64);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\r\\n   * number rounding down.  Revert on underflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return unsigned 64-bit integer number\\r\\n   */\\r\\n  function toUInt (int128 x) internal pure returns (uint64) {\\r\\n    require (x >= 0);\\r\\n    return uint64 (x >> 64);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\r\\n   * number rounding down.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 128.128-bin fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function from128x128 (int256 x) internal pure returns (int128) {\\r\\n    int256 result = x >> 64;\\r\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\r\\n   * number.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 128.128 fixed point number\\r\\n   */\\r\\n  function to128x128 (int128 x) internal pure returns (int256) {\\r\\n    return int256 (x) << 64;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x + y.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function add (int128 x, int128 y) internal pure returns (int128) {\\r\\n    int256 result = int256(x) + y;\\r\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x - y.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function sub (int128 x, int128 y) internal pure returns (int128) {\\r\\n    int256 result = int256(x) - y;\\r\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x * y rounding down.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function mul (int128 x, int128 y) internal pure returns (int128) {\\r\\n    int256 result = int256(x) * y >> 64;\\r\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\r\\n   * number and y is signed 256-bit integer number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64 fixed point number\\r\\n   * @param y signed 256-bit integer number\\r\\n   * @return signed 256-bit integer number\\r\\n   */\\r\\n  function muli (int128 x, int256 y) internal pure returns (int256) {\\r\\n    if (x == MIN_64x64) {\\r\\n      require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\r\\n        y <= 0x1000000000000000000000000000000000000000000000000);\\r\\n      return -y << 63;\\r\\n    } else {\\r\\n      bool negativeResult = false;\\r\\n      if (x < 0) {\\r\\n        x = -x;\\r\\n        negativeResult = true;\\r\\n      }\\r\\n      if (y < 0) {\\r\\n        y = -y; // We rely on overflow behavior here\\r\\n        negativeResult = !negativeResult;\\r\\n      }\\r\\n      uint256 absoluteResult = mulu (x, uint256 (y));\\r\\n      if (negativeResult) {\\r\\n        require (absoluteResult <=\\r\\n          0x8000000000000000000000000000000000000000000000000000000000000000);\\r\\n        return -int256 (absoluteResult); // We rely on overflow behavior here\\r\\n      } else {\\r\\n        require (absoluteResult <=\\r\\n          0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n        return int256 (absoluteResult);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\r\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64 fixed point number\\r\\n   * @param y unsigned 256-bit integer number\\r\\n   * @return unsigned 256-bit integer number\\r\\n   */\\r\\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\\r\\n    if (y == 0) return 0;\\r\\n\\r\\n    require (x >= 0);\\r\\n\\r\\n    uint256 lo = (uint256 (x) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\r\\n    uint256 hi = uint256 (x) * (y >> 128);\\r\\n\\r\\n    require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n    hi <<= 64;\\r\\n\\r\\n    require (hi <=\\r\\n      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\r\\n    return hi + lo;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\r\\n   * zero.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function div (int128 x, int128 y) internal pure returns (int128) {\\r\\n    require (y != 0);\\r\\n    int256 result = (int256 (x) << 64) / y;\\r\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\r\\n   * integer numbers.  Revert on overflow or when y is zero.\\r\\n   *\\r\\n   * @param x signed 256-bit integer number\\r\\n   * @param y signed 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function divi (int256 x, int256 y) internal pure returns (int128) {\\r\\n    require (y != 0);\\r\\n\\r\\n    bool negativeResult = false;\\r\\n    if (x < 0) {\\r\\n      x = -x; // We rely on overflow behavior here\\r\\n      negativeResult = true;\\r\\n    }\\r\\n    if (y < 0) {\\r\\n      y = -y; // We rely on overflow behavior here\\r\\n      negativeResult = !negativeResult;\\r\\n    }\\r\\n    uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\\r\\n    if (negativeResult) {\\r\\n      require (absoluteResult <= 0x80000000000000000000000000000000);\\r\\n      return -int128 (absoluteResult); // We rely on overflow behavior here\\r\\n    } else {\\r\\n      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n      return int128 (absoluteResult); // We rely on overflow behavior here\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\r\\n   * integer numbers.  Revert on overflow or when y is zero.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @param y unsigned 256-bit integer number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\\r\\n    require (y != 0);\\r\\n    uint128 result = divuu (x, y);\\r\\n    require (result <= uint128 (MAX_64x64));\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate -x.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function neg (int128 x) internal pure returns (int128) {\\r\\n    require (x != MIN_64x64);\\r\\n    return -x;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate |x|.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function abs (int128 x) internal pure returns (int128) {\\r\\n    require (x != MIN_64x64);\\r\\n    return x < 0 ? -x : x;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\r\\n   * zero.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function inv (int128 x) internal pure returns (int128) {\\r\\n    require (x != 0);\\r\\n    int256 result = int256 (0x100000000000000000000000000000000) / x;\\r\\n    require (result >= MIN_64x64 && result <= MAX_64x64);\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function avg (int128 x, int128 y) internal pure returns (int128) {\\r\\n    return int128 ((int256 (x) + int256 (y)) >> 1);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\r\\n   * Revert on overflow or in case x * y is negative.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\\r\\n    int256 m = int256 (x) * int256 (y);\\r\\n    require (m >= 0);\\r\\n    require (m <\\r\\n        0x4000000000000000000000000000000000000000000000000000000000000000);\\r\\n    return int128 (sqrtu (uint256 (m)));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\r\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @param y uint256 value\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\\r\\n    uint256 absoluteResult;\\r\\n    bool negativeResult = false;\\r\\n    if (x >= 0) {\\r\\n      absoluteResult = powu (uint256 (x) << 63, y);\\r\\n    } else {\\r\\n      // We rely on overflow behavior here\\r\\n      absoluteResult = powu (uint256 (uint128 (-x)) << 63, y);\\r\\n      negativeResult = y & 1 > 0;\\r\\n    }\\r\\n\\r\\n    absoluteResult >>= 63;\\r\\n\\r\\n    if (negativeResult) {\\r\\n      require (absoluteResult <= 0x80000000000000000000000000000000);\\r\\n      return -int128 (absoluteResult); // We rely on overflow behavior here\\r\\n    } else {\\r\\n      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n      return int128 (absoluteResult); // We rely on overflow behavior here\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate sqrt (x) rounding down.  Revert if x < 0.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function sqrt (int128 x) internal pure returns (int128) {\\r\\n    require (x >= 0);\\r\\n    return int128 (sqrtu (uint256 (x) << 64));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate binary logarithm of x.  Revert if x <= 0.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function log_2 (int128 x) internal pure returns (int128) {\\r\\n    require (x > 0);\\r\\n\\r\\n    int256 msb = 0;\\r\\n    int256 xc = x;\\r\\n    if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\r\\n    if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\r\\n    if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\r\\n    if (xc >= 0x100) { xc >>= 8; msb += 8; }\\r\\n    if (xc >= 0x10) { xc >>= 4; msb += 4; }\\r\\n    if (xc >= 0x4) { xc >>= 2; msb += 2; }\\r\\n    if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\r\\n\\r\\n    int256 result = msb - 64 << 64;\\r\\n    uint256 ux = uint256 (x) << uint256 (127 - msb);\\r\\n    for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\r\\n      ux *= ux;\\r\\n      uint256 b = ux >> 255;\\r\\n      ux >>= 127 + b;\\r\\n      result += bit * int256 (b);\\r\\n    }\\r\\n\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate natural logarithm of x.  Revert if x <= 0.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function ln (int128 x) internal pure returns (int128) {\\r\\n    require (x > 0);\\r\\n\\r\\n    return int128 (\\r\\n        uint256 (log_2 (x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate binary exponent of x.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function exp_2 (int128 x) internal pure returns (int128) {\\r\\n    require (x < 0x400000000000000000); // Overflow\\r\\n\\r\\n    if (x < -0x400000000000000000) return 0; // Underflow\\r\\n\\r\\n    uint256 result = 0x80000000000000000000000000000000;\\r\\n\\r\\n    if (x & 0x8000000000000000 > 0)\\r\\n      result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\r\\n    if (x & 0x4000000000000000 > 0)\\r\\n      result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\r\\n    if (x & 0x2000000000000000 > 0)\\r\\n      result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\r\\n    if (x & 0x1000000000000000 > 0)\\r\\n      result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\r\\n    if (x & 0x800000000000000 > 0)\\r\\n      result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\r\\n    if (x & 0x400000000000000 > 0)\\r\\n      result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\r\\n    if (x & 0x200000000000000 > 0)\\r\\n      result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\r\\n    if (x & 0x100000000000000 > 0)\\r\\n      result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\r\\n    if (x & 0x80000000000000 > 0)\\r\\n      result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\r\\n    if (x & 0x40000000000000 > 0)\\r\\n      result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\r\\n    if (x & 0x20000000000000 > 0)\\r\\n      result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\r\\n    if (x & 0x10000000000000 > 0)\\r\\n      result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\r\\n    if (x & 0x8000000000000 > 0)\\r\\n      result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\r\\n    if (x & 0x4000000000000 > 0)\\r\\n      result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\r\\n    if (x & 0x2000000000000 > 0)\\r\\n      result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\r\\n    if (x & 0x1000000000000 > 0)\\r\\n      result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\r\\n    if (x & 0x800000000000 > 0)\\r\\n      result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\r\\n    if (x & 0x400000000000 > 0)\\r\\n      result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\r\\n    if (x & 0x200000000000 > 0)\\r\\n      result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\r\\n    if (x & 0x100000000000 > 0)\\r\\n      result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\r\\n    if (x & 0x80000000000 > 0)\\r\\n      result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\r\\n    if (x & 0x40000000000 > 0)\\r\\n      result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\r\\n    if (x & 0x20000000000 > 0)\\r\\n      result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\r\\n    if (x & 0x10000000000 > 0)\\r\\n      result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\r\\n    if (x & 0x8000000000 > 0)\\r\\n      result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\r\\n    if (x & 0x4000000000 > 0)\\r\\n      result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\r\\n    if (x & 0x2000000000 > 0)\\r\\n      result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\r\\n    if (x & 0x1000000000 > 0)\\r\\n      result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\r\\n    if (x & 0x800000000 > 0)\\r\\n      result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\r\\n    if (x & 0x400000000 > 0)\\r\\n      result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\r\\n    if (x & 0x200000000 > 0)\\r\\n      result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\r\\n    if (x & 0x100000000 > 0)\\r\\n      result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\r\\n    if (x & 0x80000000 > 0)\\r\\n      result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\r\\n    if (x & 0x40000000 > 0)\\r\\n      result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\r\\n    if (x & 0x20000000 > 0)\\r\\n      result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\r\\n    if (x & 0x10000000 > 0)\\r\\n      result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\r\\n    if (x & 0x8000000 > 0)\\r\\n      result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\r\\n    if (x & 0x4000000 > 0)\\r\\n      result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\r\\n    if (x & 0x2000000 > 0)\\r\\n      result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\r\\n    if (x & 0x1000000 > 0)\\r\\n      result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\r\\n    if (x & 0x800000 > 0)\\r\\n      result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\r\\n    if (x & 0x400000 > 0)\\r\\n      result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\r\\n    if (x & 0x200000 > 0)\\r\\n      result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\r\\n    if (x & 0x100000 > 0)\\r\\n      result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\r\\n    if (x & 0x80000 > 0)\\r\\n      result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\r\\n    if (x & 0x40000 > 0)\\r\\n      result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\r\\n    if (x & 0x20000 > 0)\\r\\n      result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\r\\n    if (x & 0x10000 > 0)\\r\\n      result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\r\\n    if (x & 0x8000 > 0)\\r\\n      result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\r\\n    if (x & 0x4000 > 0)\\r\\n      result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\r\\n    if (x & 0x2000 > 0)\\r\\n      result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\r\\n    if (x & 0x1000 > 0)\\r\\n      result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\r\\n    if (x & 0x800 > 0)\\r\\n      result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\r\\n    if (x & 0x400 > 0)\\r\\n      result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\r\\n    if (x & 0x200 > 0)\\r\\n      result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\r\\n    if (x & 0x100 > 0)\\r\\n      result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\r\\n    if (x & 0x80 > 0)\\r\\n      result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\r\\n    if (x & 0x40 > 0)\\r\\n      result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\r\\n    if (x & 0x20 > 0)\\r\\n      result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\r\\n    if (x & 0x10 > 0)\\r\\n      result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\r\\n    if (x & 0x8 > 0)\\r\\n      result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\r\\n    if (x & 0x4 > 0)\\r\\n      result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\r\\n    if (x & 0x2 > 0)\\r\\n      result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\r\\n    if (x & 0x1 > 0)\\r\\n      result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\r\\n\\r\\n    result >>= uint256 (63 - (x >> 64));\\r\\n    require (result <= uint256 (MAX_64x64));\\r\\n\\r\\n    return int128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate natural exponent of x.  Revert on overflow.\\r\\n   *\\r\\n   * @param x signed 64.64-bit fixed point number\\r\\n   * @return signed 64.64-bit fixed point number\\r\\n   */\\r\\n  function exp (int128 x) internal pure returns (int128) {\\r\\n    require (x < 0x400000000000000000); // Overflow\\r\\n\\r\\n    if (x < -0x400000000000000000) return 0; // Underflow\\r\\n\\r\\n    return exp_2 (\\r\\n        int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\r\\n   * integer numbers.  Revert on overflow or when y is zero.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @param y unsigned 256-bit integer number\\r\\n   * @return unsigned 64.64-bit fixed point number\\r\\n   */\\r\\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\\r\\n    require (y != 0);\\r\\n\\r\\n    uint256 result;\\r\\n\\r\\n    if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\r\\n      result = (x << 64) / y;\\r\\n    else {\\r\\n      uint256 msb = 192;\\r\\n      uint256 xc = x >> 192;\\r\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\r\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\r\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\r\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\r\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\r\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\r\\n\\r\\n      result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\r\\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n\\r\\n      uint256 hi = result * (y >> 128);\\r\\n      uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n\\r\\n      uint256 xh = x >> 192;\\r\\n      uint256 xl = x << 64;\\r\\n\\r\\n      if (xl < lo) xh -= 1;\\r\\n      xl -= lo; // We rely on overflow behavior here\\r\\n      lo = hi << 128;\\r\\n      if (xl < lo) xh -= 1;\\r\\n      xl -= lo; // We rely on overflow behavior here\\r\\n\\r\\n      assert (xh == hi >> 128);\\r\\n\\r\\n      result += xl / y;\\r\\n    }\\r\\n\\r\\n    require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\r\\n    return uint128 (result);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate x^y assuming 0^0 is 1, where x is unsigned 129.127 fixed point\\r\\n   * number and y is unsigned 256-bit integer number.  Revert on overflow.\\r\\n   *\\r\\n   * @param x unsigned 129.127-bit fixed point number\\r\\n   * @param y uint256 value\\r\\n   * @return unsigned 129.127-bit fixed point number\\r\\n   */\\r\\n  function powu (uint256 x, uint256 y) private pure returns (uint256) {\\r\\n    if (y == 0) return 0x80000000000000000000000000000000;\\r\\n    else if (x == 0) return 0;\\r\\n    else {\\r\\n      int256 msb = 0;\\r\\n      uint256 xc = x;\\r\\n      if (xc >= 0x100000000000000000000000000000000) { xc >>= 128; msb += 128; }\\r\\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\r\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\r\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\r\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\r\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\r\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\r\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\r\\n\\r\\n      int256 xe = msb - 127;\\r\\n      if (xe > 0) x >>= uint256 (xe);\\r\\n      else x <<= uint256 (-xe);\\r\\n\\r\\n      uint256 result = 0x80000000000000000000000000000000;\\r\\n      int256 re = 0;\\r\\n\\r\\n      while (y > 0) {\\r\\n        if (y & 1 > 0) {\\r\\n          result = result * x;\\r\\n          y -= 1;\\r\\n          re += xe;\\r\\n          if (result >=\\r\\n            0x8000000000000000000000000000000000000000000000000000000000000000) {\\r\\n            result >>= 128;\\r\\n            re += 1;\\r\\n          } else result >>= 127;\\r\\n          if (re < -127) return 0; // Underflow\\r\\n          require (re < 128); // Overflow\\r\\n        } else {\\r\\n          x = x * x;\\r\\n          y >>= 1;\\r\\n          xe <<= 1;\\r\\n          if (x >=\\r\\n            0x8000000000000000000000000000000000000000000000000000000000000000) {\\r\\n            x >>= 128;\\r\\n            xe += 1;\\r\\n          } else x >>= 127;\\r\\n          if (xe < -127) return 0; // Underflow\\r\\n          require (xe < 128); // Overflow\\r\\n        }\\r\\n      }\\r\\n\\r\\n      if (re > 0) result <<= uint256 (re);\\r\\n      else if (re < 0) result >>= uint256 (-re);\\r\\n\\r\\n      return result;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\r\\n   * number.\\r\\n   *\\r\\n   * @param x unsigned 256-bit integer number\\r\\n   * @return unsigned 128-bit integer number\\r\\n   */\\r\\n  function sqrtu (uint256 x) private pure returns (uint128) {\\r\\n    if (x == 0) return 0;\\r\\n    else {\\r\\n      uint256 xx = x;\\r\\n      uint256 r = 1;\\r\\n      if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\\r\\n      if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\\r\\n      if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\\r\\n      if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\\r\\n      if (xx >= 0x100) { xx >>= 8; r <<= 4; }\\r\\n      if (xx >= 0x10) { xx >>= 4; r <<= 2; }\\r\\n      if (xx >= 0x8) { r <<= 1; }\\r\\n      r = (r + x / r) >> 1;\\r\\n      r = (r + x / r) >> 1;\\r\\n      r = (r + x / r) >> 1;\\r\\n      r = (r + x / r) >> 1;\\r\\n      r = (r + x / r) >> 1;\\r\\n      r = (r + x / r) >> 1;\\r\\n      r = (r + x / r) >> 1; // Seven iterations should be enough\\r\\n      uint256 r1 = x / r;\\r\\n      return uint128 (r < r1 ? r : r1);\\r\\n    }\\r\\n  }\\r\\n}\",\"keccak256\":\"0x11041140badd49808b8b74be10da23b5d2ffccc05f842ec211cb4093c7450f17\",\"license\":\"BSD-4-Clause\"},\"contracts/PrimitiveEngine.sol\":{\"content\":\"pragma solidity 0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\n/**\\r\\n * @title   Primitive Engine\\r\\n * @author  Primitive\\r\\n */\\r\\n\\r\\nimport \\\"./ReplicationMath.sol\\\";\\r\\nimport \\\"./ABDKMath64x64.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\n\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\ninterface ICallback {\\r\\n    function addXYCallback(uint deltaX, uint deltaY) external;\\r\\n    function directDepositCallback(uint deltaX, uint deltaY) external;\\r\\n    function withdrawalCallback(uint deltaX, uint deltaY) external returns (address);\\r\\n    function getCaller() external returns (address);\\r\\n}\\r\\n\\r\\ncontract PrimitiveEngine {\\r\\n    using SafeERC20 for IERC20;\\r\\n    using ABDKMath64x64 for int128;\\r\\n    using ReplicationMath for int128;\\r\\n\\r\\n    uint public constant INIT_SUPPLY = 10 ** 21;\\r\\n    uint public constant FEE = 10 ** 3;\\r\\n\\r\\n    event PositionUpdated(address indexed from, Position pos);\\r\\n    event Update(uint R1, uint R2, uint blockNumber);\\r\\n    event AddedBoth(address indexed from, uint indexed nonce, uint deltaX, uint deltaY);\\r\\n    event RemovedBoth(address indexed from, uint indexed nonce, uint deltaX, uint deltaY);\\r\\n    event AddedX(address indexed from, uint indexed nonce, uint deltaX, uint deltaY);\\r\\n    event RemovedX(address indexed from, uint indexed nonce, uint deltaX, uint deltaY);\\r\\n\\r\\n    struct Calibration {\\r\\n        uint256 strike;\\r\\n        uint32 sigma;\\r\\n        uint32 time;\\r\\n    }\\r\\n\\r\\n    struct Capital {\\r\\n        uint RX1;\\r\\n        uint RX2;\\r\\n        uint liquidity;\\r\\n    }\\r\\n\\r\\n    struct Accumulator {\\r\\n        uint ARX1;\\r\\n        uint ARX2;\\r\\n        uint blockNumberLast;\\r\\n    }\\r\\n\\r\\n    struct Position {\\r\\n        address owner;\\r\\n        uint nonce;\\r\\n        uint BX1;\\r\\n        uint BY2;\\r\\n        uint liquidity;\\r\\n        bool unlocked;\\r\\n    }\\r\\n\\r\\n    address public immutable TX1;\\r\\n    address public immutable TY2;\\r\\n\\r\\n    Accumulator public accumulator;\\r\\n    Calibration public calibration;\\r\\n    Capital public capital;\\r\\n    Position public activePosition;\\r\\n    mapping(bytes32 => Position) public positions;\\r\\n\\r\\n    constructor(address risky, address riskFree) {\\r\\n        TX1 = risky;\\r\\n        TY2 = riskFree;\\r\\n    }\\r\\n\\r\\n    function getBX1() public view returns (uint) {\\r\\n        return IERC20(TX1).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function getBY2() public view returns (uint) {\\r\\n        return IERC20(TY2).balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function initialize(uint strike_, uint32 sigma_, uint32 time_) public {\\r\\n        require(calibration.time == 0, \\\"Already initialized\\\");\\r\\n        require(time_ > 0, \\\"Time is 0\\\");\\r\\n        require(strike_ > 0, \\\"Strike is 0\\\");\\r\\n        require(sigma_ > 0, \\\"Sigma is 0\\\");\\r\\n        calibration = Calibration({\\r\\n            strike: strike_,\\r\\n            sigma: sigma_,\\r\\n            time: time_\\r\\n        });\\r\\n        capital = Capital({\\r\\n            RX1: 0,\\r\\n            RX2: 0,\\r\\n            liquidity: INIT_SUPPLY\\r\\n        });\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Updates R to new values for X and Y.\\r\\n     */\\r\\n    function _update(uint postR1, uint postR2) public {\\r\\n        Capital storage cap = capital;\\r\\n        cap.RX1 = postR1;\\r\\n        cap.RX2 = postR2;\\r\\n\\r\\n        Accumulator storage acc = accumulator;\\r\\n        acc.ARX1 += postR1;\\r\\n        acc.ARX2 += postR2;\\r\\n        acc.blockNumberLast = block.number;\\r\\n        emit Update(postR1, postR2, block.number);\\r\\n    }\\r\\n\\r\\n    function start(uint deltaX, uint deltaY) public returns (bool) {\\r\\n        // if first time liquidity is added, mint the initial supply\\r\\n        Capital memory cap = capital;\\r\\n        require(cap.RX1 == 0 && cap.RX2 == 0, \\\"Already initialized\\\");\\r\\n        _update(deltaX, deltaY);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    modifier lock() {\\r\\n        require(activePosition.unlocked, \\\"Position locked\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function _updatePosition(address owner, uint nonce) internal lock {\\r\\n        Position storage pos = _getPosition(owner, nonce);\\r\\n        Position memory nextPos = activePosition;\\r\\n        require(pos.owner == nextPos.owner, \\\"Not owner\\\");\\r\\n        require(pos.nonce == nextPos.nonce, \\\"Not nonce\\\");\\r\\n        pos.BX1 = nextPos.BX1;\\r\\n        pos.BY2 = nextPos.BY2;\\r\\n        pos.liquidity = nextPos.liquidity;\\r\\n        pos.unlocked = false;\\r\\n        delete activePosition;\\r\\n    }\\r\\n\\r\\n    function directDeposit(address owner, uint nonce, uint deltaX, uint deltaY) public returns (bool) {\\r\\n        activePosition = _getPosition(owner, nonce);\\r\\n\\r\\n        // Update state\\r\\n        activePosition.unlocked = true;\\r\\n        activePosition.BX1 += deltaX;\\r\\n        activePosition.BY2 += deltaY;\\r\\n\\r\\n        { // avoids stack too deep errors\\r\\n        uint preBX1 = getBX1();\\r\\n        uint preBY2 = getBY2();\\r\\n        ICallback(msg.sender).directDepositCallback(deltaX, deltaY);\\r\\n        require(getBX1() >= preBX1 + deltaX, \\\"Not enough TX1\\\");\\r\\n        require(getBY2() >= preBY2 + deltaY, \\\"Not enough TY2\\\");\\r\\n        }\\r\\n\\r\\n        // Commit state updates\\r\\n        emit PositionUpdated(msg.sender, activePosition);\\r\\n        _updatePosition(owner, nonce);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function directWithdrawal(address owner, uint nonce, uint deltaX, uint deltaY) public returns (bool) {\\r\\n        activePosition = _getPosition(owner, nonce);\\r\\n\\r\\n        // Update state\\r\\n        activePosition.unlocked = true;\\r\\n        require(activePosition.BX1 >= deltaX, \\\"Not enough X\\\");\\r\\n        require(activePosition.BY2 >= deltaY, \\\"Not enough Y\\\");\\r\\n        activePosition.BX1 -= deltaX;\\r\\n        activePosition.BY2 -= deltaY;\\r\\n\\r\\n        { // avoids stack too deep errors\\r\\n        uint preBX1 = getBX1();\\r\\n        uint preBY2 = getBY2();\\r\\n        address caller = ICallback(msg.sender).withdrawalCallback(deltaX, deltaY);\\r\\n        IERC20(TX1).safeTransfer(caller, deltaX);\\r\\n        IERC20(TY2).safeTransfer(caller, deltaY);\\r\\n        require(preBX1 - deltaX >= getBX1(), \\\"Not enough TX1\\\");\\r\\n        require(preBY2 - deltaY >= getBY2(), \\\"Not enough TY2\\\");\\r\\n        }\\r\\n\\r\\n        // Commit state updates\\r\\n        emit PositionUpdated(msg.sender, activePosition);\\r\\n        _updatePosition(owner, nonce);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function addBoth(address owner, uint nonce, uint deltaL) public returns (uint, uint) {\\r\\n        activePosition = _getPosition(owner, nonce);\\r\\n\\r\\n        Capital storage cap = capital;\\r\\n        uint liquidity = cap.liquidity; // gas savings\\r\\n        require(liquidity > 0, \\\"Not bound\\\");\\r\\n        uint RX1 = cap.RX1;\\r\\n        uint RX2 = cap.RX2;\\r\\n        uint deltaX = deltaL * RX1 / liquidity;\\r\\n        uint deltaY = deltaL * RX2 / liquidity;\\r\\n        require(deltaX > 0 && deltaY > 0, \\\"Delta is 0\\\");\\r\\n        uint postR1 = RX1 + deltaX;\\r\\n        uint postR2 = RX2 + deltaY;\\r\\n        int128 postInvariant = getInvariant(postR1, postR2);\\r\\n        require(postInvariant >= invariantLast(), \\\"Invalid invariant\\\");\\r\\n        \\r\\n        // Update State\\r\\n        cap.liquidity += deltaL;\\r\\n        activePosition.unlocked = true;\\r\\n        activePosition.liquidity += deltaL;\\r\\n\\r\\n        // Check balances and trigger callback\\r\\n        { // avoids stack too deep errors\\r\\n        uint preBX1 = getBX1();\\r\\n        uint preBY2 = getBY2();\\r\\n        ICallback(msg.sender).addXYCallback(deltaX, deltaY);\\r\\n        require(getBX1() >= preBX1 + deltaX, \\\"Not enough TX1\\\");\\r\\n        require(getBY2() >= preBY2 + deltaY, \\\"Not enough TY2\\\");\\r\\n        }\\r\\n        \\r\\n        // Commit state updates\\r\\n        _update(postR1, postR2);\\r\\n        _updatePosition(owner, nonce);\\r\\n        emit AddedBoth(msg.sender, nonce, deltaX, deltaY);\\r\\n        return (postR1, postR2);\\r\\n    }\\r\\n\\r\\n    function removeBoth(uint nonce, uint deltaL) public returns (uint, uint) {\\r\\n        activePosition = _getPosition(msg.sender, nonce);\\r\\n\\r\\n        Capital storage cap = capital;\\r\\n        uint liquidity = cap.liquidity; // gas savings\\r\\n\\r\\n        require(liquidity > 0, \\\"Not bound\\\");\\r\\n        uint RX1 = cap.RX1;\\r\\n        uint RX2 = cap.RX2;\\r\\n        uint deltaX = deltaL * RX1 / liquidity;\\r\\n        uint deltaY = deltaL * RX2 / liquidity;\\r\\n        require(deltaX > 0 && deltaY > 0, \\\"Delta is 0\\\");\\r\\n        uint postR1 = RX1 - deltaX;\\r\\n        uint postR2 = RX2 - deltaY;\\r\\n        int128 postInvariant = getInvariant(postR1, postR2);\\r\\n        require(invariantLast() >= postInvariant, \\\"Invalid invariant\\\");\\r\\n\\r\\n        // Update state\\r\\n        require(cap.liquidity >= deltaL, \\\"Above max burn\\\");\\r\\n        cap.liquidity -= deltaL;\\r\\n        activePosition.unlocked = true;\\r\\n        require(activePosition.liquidity >= deltaL, \\\"Not enough L\\\");\\r\\n        activePosition.liquidity -= deltaL;\\r\\n        activePosition.BX1 += deltaX;\\r\\n        activePosition.BY2 += deltaY;\\r\\n        \\r\\n        // Commit state updates\\r\\n        _update(postR1, postR2);\\r\\n        _updatePosition(msg.sender, nonce);\\r\\n        emit RemovedBoth(msg.sender, nonce, deltaX, deltaY);\\r\\n        return (postR1, postR2);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Updates the reserves after adding X and removing Y.\\r\\n     * @return  Amount of Y removed.\\r\\n     */\\r\\n    function addX(address owner, uint nonce, uint deltaX, uint minDeltaY) public returns (uint) {\\r\\n        activePosition = _getPosition(owner, nonce);\\r\\n\\r\\n        // I = FXR2 - FX(R1)\\r\\n        // I + FX(R1) = FXR2\\r\\n        // R2a - R2b = -deltaY\\r\\n        Capital storage cap = capital;\\r\\n        uint256 RX1 = cap.RX1; // gas savings\\r\\n        uint256 RX2 = cap.RX2; // gas savings\\r\\n        int128 invariant = invariantLast(); //gas savings\\r\\n        int128 FXR1 = _getOutputR2(deltaX); // r1 + deltaX\\r\\n        uint256 FXR2 = invariant.add(FXR1).fromIntToWei();\\r\\n        uint256 deltaY =  FXR2 > RX2 ? FXR2 - RX2 : RX2 - FXR2;\\r\\n        deltaY -= deltaY / FEE;\\r\\n\\r\\n        require(deltaY >= minDeltaY, \\\"Not enough Y removed\\\");\\r\\n        uint256 postR1 = RX1 + deltaX;\\r\\n        uint256 postR2 = RX2 - deltaY;\\r\\n        int128 postInvariant = getInvariant(postR1, postR2);\\r\\n        require(postInvariant >= invariant, \\\"Invalid invariant\\\");\\r\\n\\r\\n        // Update State\\r\\n        activePosition.unlocked = true;\\r\\n        require(activePosition.BX1 >= deltaX, \\\"Not enough X\\\");\\r\\n        activePosition.BX1 -= deltaX;\\r\\n        activePosition.BY2 += deltaY;\\r\\n\\r\\n        _update(postR1, postR2);\\r\\n        _updatePosition(owner, nonce);\\r\\n        emit AddedX(msg.sender, nonce, deltaX, deltaY);\\r\\n        return deltaY;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Updates the reserves after removing X and adding Y.\\r\\n     * @return  Amount of Y added.\\r\\n     */\\r\\n    function removeX(address owner, uint nonce, uint deltaX, uint maxDeltaY) public returns (uint) {\\r\\n        activePosition = _getPosition(owner, nonce);\\r\\n\\r\\n        // I = FXR2 - FX(R1)\\r\\n        // I + FX(R1) = FXR2\\r\\n        Capital storage cap = capital;\\r\\n        uint256 RX1 = cap.RX1; // gas savings\\r\\n        uint256 RX2 = cap.RX2; // gas savings\\r\\n        int128 invariant = invariantLast(); //gas savings\\r\\n        int128 FXR1 = _getInputR2(deltaX); // r1 - deltaX\\r\\n        uint256 FXR2 = invariant.add(FXR1).fromIntToWei();\\r\\n        uint256 deltaY =  FXR2 > RX2 ? FXR2 - RX2 : RX2 - FXR2;\\r\\n        deltaY += deltaY / FEE;\\r\\n\\r\\n        require(maxDeltaY >= deltaY, \\\"Too much Y added\\\");\\r\\n        uint postR1 = RX1 - deltaX;\\r\\n        uint postR2 = RX2 + deltaY;\\r\\n        int128 postInvariant = getInvariant(postR1, postR2);\\r\\n        require(postInvariant >= invariant, \\\"Invalid invariant\\\");\\r\\n\\r\\n        // Update State\\r\\n        activePosition.unlocked = true;\\r\\n        activePosition.BX1 += deltaX;\\r\\n        require(activePosition.BY2 >= deltaY, \\\"Not enough Y\\\");\\r\\n        activePosition.BY2 -= deltaY;\\r\\n        \\r\\n        _update(postR1, postR2);\\r\\n        _updatePosition(owner, nonce);\\r\\n        emit RemovedX(msg.sender, nonce, deltaX, deltaY);\\r\\n        return deltaY;\\r\\n    }\\r\\n\\r\\n    // ===== Swap and Liquidity Math =====\\r\\n\\r\\n    function getInvariant(uint postR1, uint postR2) public view returns (int128) {\\r\\n        Calibration memory cal = calibration;\\r\\n        int128 invariant = ReplicationMath.getConstant(postR1, postR2, cal.strike, cal.sigma, cal.time);\\r\\n        return invariant;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Fetches the amount of y which must leave the R2 to preserve the invariant.\\r\\n     * @dev     R1 = x, R2 = y\\r\\n     */\\r\\n    function getOutputAmount(uint deltaX) public view returns (uint) {\\r\\n        uint scaled = _getOutputR2Scaled(deltaX);\\r\\n        uint RX2 = capital.RX2; // gas savings\\r\\n        uint deltaY = scaled > RX2 ? scaled - RX2 : RX2 - scaled;\\r\\n        return deltaY;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Fetches the amount of y which must enter the R2 to preserve the invariant.\\r\\n     */\\r\\n    function getInputAmount(uint deltaX) public view returns (uint) {\\r\\n        uint scaled = _getInputR2Scaled(deltaX);\\r\\n        uint RX2 = capital.RX2; // gas savings\\r\\n        uint deltaY = scaled > RX2 ? scaled - RX2 : RX2 - scaled;\\r\\n        return deltaY;\\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Fetches a new R2 from an increased R1. F(R1).\\r\\n     */\\r\\n    function _getOutputR2(uint deltaX) public view returns (int128) {\\r\\n        Calibration memory cal = calibration;\\r\\n        uint RX1 = capital.RX1 + deltaX; // new reserve1 value.\\r\\n        return ReplicationMath.getTradingFunction(RX1, cal.strike, cal.sigma, cal.time);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice  Fetches a new R2 from a decreased R1.\\r\\n     */\\r\\n    function _getInputR2(uint deltaX) public view returns (int128) {\\r\\n        Calibration memory cal = calibration;\\r\\n        uint RX1 = capital.RX1 - deltaX; // new reserve1 value.\\r\\n        return ReplicationMath.getTradingFunction(RX1, cal.strike, cal.sigma, cal.time);\\r\\n    }\\r\\n\\r\\n    function _getOutputR2Scaled(uint deltaX) public view returns (uint) {\\r\\n        uint scaled = ReplicationMath.fromInt(_getOutputR2(deltaX)) * 1e18 / ReplicationMath.MANTISSA;\\r\\n        return scaled;\\r\\n    }\\r\\n\\r\\n    function _getInputR2Scaled(uint deltaX) public view returns (uint) {\\r\\n        uint scaled = ReplicationMath.fromInt(_getInputR2(deltaX)) * 1e18 / ReplicationMath.MANTISSA;\\r\\n        return scaled;\\r\\n    }\\r\\n\\r\\n\\r\\n    // ==== Math Library Entry Points ====\\r\\n    function getCDF(uint x) public view returns (int128) {\\r\\n        int128 z = ABDKMath64x64.fromUInt(x);\\r\\n        return ReplicationMath.getCDF(z);\\r\\n    }\\r\\n\\r\\n    function proportionalVol() public view returns (int128) {\\r\\n        Calibration memory cal = calibration;\\r\\n        return ReplicationMath.getProportionalVolatility(cal.sigma, cal.time);\\r\\n    }\\r\\n\\r\\n    function tradingFunction() public view returns (int128) {\\r\\n        Calibration memory cal = calibration;\\r\\n        return ReplicationMath.getTradingFunction(capital.RX1, cal.strike, cal.sigma, cal.time);\\r\\n    }\\r\\n\\r\\n    // ===== View ===== \\r\\n\\r\\n    function _getPosition(address owner, uint nonce) internal returns (Position storage) {\\r\\n        bytes32 pid = keccak256(abi.encodePacked(owner, nonce));\\r\\n        Position storage pos = positions[pid];\\r\\n        if(pos.owner == address(0)) {\\r\\n            pos.owner = owner;\\r\\n            pos.nonce = nonce;\\r\\n        }\\r\\n        return pos;\\r\\n    }\\r\\n\\r\\n    function getPosition(address owner, uint nonce) public view returns (Position memory) {\\r\\n        bytes32 pid = keccak256(abi.encodePacked(owner, nonce));\\r\\n        Position memory pos = positions[pid]; \\r\\n        return pos;\\r\\n    }\\r\\n\\r\\n    function invariantLast() public view returns (int128) {\\r\\n        Calibration memory cal = calibration;\\r\\n        return ReplicationMath.getConstant(capital.RX1, capital.RX2, cal.strike, cal.sigma, cal.time);\\r\\n    }\\r\\n\\r\\n    function getCapital() public view returns (Capital memory) {\\r\\n        Capital memory cap = capital;\\r\\n        return cap; \\r\\n    }\\r\\n\\r\\n    function getAccumulator() public view returns (Accumulator memory) {\\r\\n        Accumulator memory acc = accumulator;\\r\\n        return acc; \\r\\n    }\\r\\n\\r\\n    function getCalibration() public view returns (Calibration memory) {\\r\\n        Calibration memory cal = calibration;\\r\\n        return cal; \\r\\n    }\\r\\n}\",\"keccak256\":\"0x4ffa10dffa75f86b72d51f01bf030a495d44dc8b1b49467ce95ab741d6532ee4\"},\"contracts/ReplicationMath.sol\":{\"content\":\"pragma solidity 0.7.6;\\r\\n\\r\\n/**\\r\\n * @title   Replication Math\\r\\n * @author  Primitive\\r\\n */\\r\\n\\r\\nimport \\\"./ABDKMath64x64.sol\\\";\\r\\n\\r\\n\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\nlibrary ReplicationMath {\\r\\n    using ABDKMath64x64 for *; // stores numerators as int128, denominator is 2^64.\\r\\n\\r\\n    uint256 internal constant YEAR = 31449600; // 1 year in seconds\\r\\n    uint256 internal constant MANTISSA = 10**8;\\r\\n    uint256 internal constant DENOMINATOR = 10**18; // wei\\r\\n    uint256 internal constant PERCENTAGE = 10**4;\\r\\n    int128 internal constant PERCENTAGE_INT = 184467440737095516160000;\\r\\n\\r\\n    // ===== Unit Conversion =====\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a wei value uint256 into an int128 numerator value.\\r\\n     * @param x A uint256 amount.\\r\\n     */\\r\\n    function fromWeiToInt128(uint256 x) internal pure returns (int128) {\\r\\n        return x.divu(DENOMINATOR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a denormalized percentage (1000 = 100%, 10 = 1%) into an int128.\\r\\n     */\\r\\n    function percentageInt128(uint256 denorm) internal pure returns (int128) {\\r\\n        int128 numerator = denorm.fromUInt();\\r\\n        int128 denominator = PERCENTAGE.fromUInt();\\r\\n        return numerator.div(denominator);\\r\\n    }\\r\\n\\r\\n    function percentageUInt(int128 denorm) internal pure returns (uint) {\\r\\n        uint numerator = denorm.mul(PERCENTAGE_INT).toUInt();\\r\\n        return numerator;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts second units into an int128 with units of years.\\r\\n     */\\r\\n    function secondsToYears(uint256 quantitySeconds) internal pure returns (int128) {\\r\\n        int128 time = quantitySeconds.fromUInt();\\r\\n        int128 units = YEAR.fromUInt();\\r\\n        return time.div(units);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a numerator x with denominator 2^64 into an uint256.\\r\\n     * @notice Will return 0 if a fraction < 10^8.\\r\\n     */\\r\\n    function fromInt(int128 x) internal pure returns (uint256 y) {\\r\\n        x = x.mul((MANTISSA).fromUInt());\\r\\n        y = x > 0 ? (x).toUInt() : uint256(0);\\r\\n    }\\r\\n\\r\\n    function fromIntToWei(int128 x) internal pure returns (uint y) {\\r\\n        y = fromInt(x) * 1e18 / MANTISSA;\\r\\n    } \\r\\n\\r\\n    // ===== Math ======\\r\\n\\r\\n    function getProportionalVolatility(uint sigma, uint time) internal view returns (int128 vol) {\\r\\n        // sigma * sqrt(t)\\r\\n        int128 sqrtTime = secondsToYears(time).sqrt();\\r\\n        int128 SX1 = (sigma).fromUInt();\\r\\n        vol = SX1.mul(sqrtTime);\\r\\n    }\\r\\n\\r\\n    function getTradingFunction(uint reserve0, uint strike, uint sigma, uint time) internal view returns (int128 reserve1) {\\r\\n        int128 k = fromWeiToInt128(strike);\\r\\n        // sigma*sqrt(t)\\r\\n        int128 vol = getProportionalVolatility(sigma, time);\\r\\n        int128 one = ABDKMath64x64.fromUInt(1);\\r\\n        // CDF\\r\\n        int128 phi = getCDF(one);\\r\\n        int128 reserve = fromWeiToInt128(reserve0);\\r\\n        // CDF^-1(1-x) - sigma*sqrt(t)\\r\\n        int128 input = (one.div(phi)).mul(one.sub(reserve)).mul(PERCENTAGE_INT).sub(vol).div(PERCENTAGE_INT);\\r\\n        reserve1 = k.mul(getCDF(input)); \\r\\n    }\\r\\n\\r\\n    function getConstant(uint reserve0, uint reserve1, uint strike, uint sigma, uint time) internal view returns (int128) {\\r\\n        int128 reserve2 = getTradingFunction(reserve0, strike, sigma, time);\\r\\n        int128 k = fromWeiToInt128(reserve1).sub(reserve2);\\r\\n        return k;\\r\\n    }\\r\\n\\r\\n    function getCDF(int128 x) internal pure returns (int128) {\\r\\n        // where p = 0.3275911,\\r\\n        // a1 = 0.254829592, a2 = \\u22120.284496736, a3 = 1.421413741, a4 = \\u22121.453152027, a5 = 1.061405429\\r\\n        int128 p = 0x53dd02a4f5ee2e46;\\r\\n        int128 one = ABDKMath64x64.fromUInt(1);\\r\\n        int128 two = ABDKMath64x64.fromUInt(2);\\r\\n        int128 a1 = 0x413c831bb169f874;\\r\\n        int128 a2 = -0x48d4c730f051a5fe;\\r\\n        int128 a3 = 0x16a09e667f3bcc908;\\r\\n        int128 a4 = -0x17401c57014c38f14;\\r\\n        int128 a5 = 0x10fb844255a12d72e;\\r\\n        int128 z = x.div(a3);\\r\\n        int128 t = one.div(one.add(p.mul(z.abs())));\\r\\n        int128 erf = getErrorFunction(z, t);\\r\\n        if (z < 0) {\\r\\n            erf = erf.neg();\\r\\n        }\\r\\n        int128 result = (one.div(two)).mul(one.add(erf));\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    function getErrorFunction(int128 z, int128 t) internal pure returns (int128) {\\r\\n        // where a1 = 0.254829592, a2 = \\u22120.284496736, a3 = 1.421413741, a4 = \\u22121.453152027, a5 = 1.061405429\\r\\n        int128 step1;\\r\\n        {\\r\\n            int128 a3 = 0x16a09e667f3bcc908;\\r\\n            int128 a4 = -0x17401c57014c38f14;\\r\\n            int128 a5 = 0x10fb844255a12d72e;\\r\\n            step1 = t.mul(a3.add(t.mul(a4.add(t.mul(a5)))));\\r\\n        }\\r\\n\\r\\n        int128 result;\\r\\n        {\\r\\n            int128 one = ABDKMath64x64.fromUInt(1);\\r\\n            int128 a1 = 0x413c831bb169f874;\\r\\n            int128 a2 = -0x48d4c730f051a5fe;\\r\\n            int128 step2 = a1.add(t.mul(a2.add(step1)));\\r\\n            result = one.sub(t.mul(step2.mul(((z).pow(2).neg()).exp())));\\r\\n        }\\r\\n        return result;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x2bf767eac9efbb651b247d043026cd8a94ce3bd46e6d1e6faa1abde35ce478a9\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162003a1c38038062003a1c833981016040819052620000349162000070565b6001600160601b0319606092831b8116608052911b1660a052620000a7565b80516001600160a01b03811681146200006b57600080fd5b919050565b6000806040838503121562000083578182fd5b6200008e8362000053565b91506200009e6020840162000053565b90509250929050565b60805160601c60a05160601c613937620000e5600039806104bd52806105c85280610fe0525080610a6c5280610fac52806116e752506139376000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c80638fb4b57311610125578063cef42bc2116100ad578063d4be70f31161007c578063d4be70f314610458578063e00323831461046b578063e3775d7914610480578063f133a7c614610488578063ff40807b1461049b57610211565b8063cef42bc214610422578063cfe703b614610435578063d211fd181461043d578063d29d53e81461044557610211565b8063c57981b5116100f4578063c57981b5146103d1578063c866c218146103d9578063cabeb725146103ee578063cc85d00b14610405578063cdc0c82d1461040d57610211565b80638fb4b57314610390578063956cc859146103a3578063b76da050146103ab578063bcb4aff8146103be57610211565b80633adbb5af116101a85780635d719c63116101775780635d719c63146103235780636c3686921461033657806372e8b44814610349578063867886431461035c5780638b99bcb51461036f57610211565b80633adbb5af146102d5578063401e52f9146102f55780634ba1502814610308578063514ea4bf1461031057610211565b80631157c2d2116101e45780631157c2d21461027a57806332112d091461028f57806338f05975146102a25780633a6d00b3146102b557610211565b8063018ad9c314610216578063033811541461023457806307f293f71461024b5780630f0dab5114610260575b600080fd5b61021e6104a3565b60405161022b9190613850565b60405180910390f35b61023c610547565b60405161022b93929190613867565b610253610553565b60405161022b9190613492565b6102686105a2565b60405161022b96959493929190613452565b6102826105c6565b60405161022b919061343e565b61021e61029d36600461333d565b6105ea565b6102536102b0366004613377565b6107bb565b6102c86102c336600461333d565b61080b565b60405161022b9190613487565b6102e86102e33660046132de565b6109a2565b60405161022b91906137b6565b61021e610303366004613377565b610a3a565b610282610a6a565b61026861031e366004613377565b610a8e565b610253610331366004613377565b610ad0565b61021e610344366004613377565b610b17565b61021e610357366004613377565b610b49565b61021e61036a366004613377565b610b5d565b61038261037d366004613309565b610b69565b60405161022b929190613859565b6102c861039e3660046133a7565b610dd6565b61021e610e3a565b6102c86103b936600461333d565b610e47565b6103826103cc3660046133a7565b611096565b61021e611296565b6103ec6103e73660046133c8565b61129c565b005b6103f66113b8565b60405161022b9392919061387d565b6102536113d2565b610415611415565b60405161022b9190613789565b610253610430366004613377565b611450565b61025361146e565b61023c6114ab565b61021e61045336600461333d565b6114b7565b6102536104663660046133a7565b61165b565b6104736116a0565b60405161022b919061377b565b61021e6116cd565b6103ec6104963660046133a7565b61171c565b61047361177c565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906104f290309060040161343e565b60206040518083038186803b15801561050a57600080fd5b505afa15801561051e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610542919061338f565b905090565b60005460015460025483565b6040805160608101825260035480825260045463ffffffff80821660208501819052600160201b9092041693830184905260055460065460009561059c949293919291906117a9565b91505090565b600854600954600a54600b54600c54600d546001600160a01b039095169460ff1686565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006105f685856117de565b8054600880546001600160a01b0319166001600160a01b0390921691909117905560018101546009556002810154600a556003810154600b556004810154600c55600590810154600d805460ff909216151560ff1990921691909117905580546006546000610663610553565b90506000610670886107bb565b9050600061068d610685600f85900b84611854565b600f0b611888565b905060008482116106a0578185036106a4565b8482035b90506103e881049003888110156106d65760405162461bcd60e51b81526004016106cd906136f6565b60405180910390fd5b858a0181860360006106e8838361165b565b905086600f0b81600f0b12156107105760405162461bcd60e51b81526004016106cd90613662565b600d805460ff19166001179055600a548d111561073f5760405162461bcd60e51b81526004016106cd9061350e565b600a80548e90039055600b80548501905561075a838361171c565b6107648f8f6118b0565b8d336001600160a01b03167f90bad5276a3a095ef9c17490bcb0fd083cd093442264757cc032c9237ebfda8e8f876040516107a0929190613859565b60405180910390a350919d9c50505050505050505050505050565b6040805160608101825260035480825260045463ffffffff80821660208501819052600160201b90920416938301849052600554600094908601926108019284926119d0565b925050505b919050565b600061081785856117de565b8054600880546001600160a01b0319166001600160a01b039092169190911790556001808201546009556002820154600a8181556003840154600b8181556004860154600c55600590950154600d805460ff909216151560ff199283161790911690941790935590860190558301905560006108916116cd565b9050600061089d6104a3565b604051637f23fb3f60e01b81529091503390637f23fb3f906108c59088908890600401613859565b600060405180830381600087803b1580156108df57600080fd5b505af11580156108f3573d6000803e3d6000fd5b505050508482016109026116cd565b10156109205760405162461bcd60e51b81526004016106cd906135c9565b83810161092b6104a3565b10156109495760405162461bcd60e51b81526004016106cd906134c3565b5050336001600160a01b03167fa8d23733bdb6b6501ae798968944ff3c395cf47459a57ea862484108b86a88c860086040516109859190613805565b60405180910390a261099785856118b0565b506001949350505050565b6109aa61322c565b600083836040516020016109bf92919061341c565b60408051601f1981840301815282825280516020918201206000908152600e825282902060c08401835280546001600160a01b0316845260018101549184019190915260028101549183019190915260038101546060830152600481015460808301526005015460ff16151560a08201529150505b92915050565b600080610a4683610b49565b6006549091506000818311610a5d57828203610a61565b8183035b95945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600e602052600090815260409020805460018201546002830154600384015460048501546005909501546001600160a01b039094169492939192909160ff1686565b6040805160608101825260035480825260045463ffffffff80821660208501819052600160201b9092041693830184905260055460009490869003926108019284926119d0565b6000806305f5e100610b30610b2b85610ad0565b611a85565b670de0b6b3a76400000281610b4157fe5b049392505050565b6000806305f5e100610b30610b2b856107bb565b600080610a4683610b17565b600080610b7685856117de565b8054600880546001600160a01b0319166001600160a01b0390921691909117905560018101546009556002810154600a556003810154600b556004810154600c55600590810154600d805460ff909216151560ff1990921691909117905560075480610bf45760405162461bcd60e51b81526004016106cd906134a0565b8154600183015460008388840281610c0857fe5b049050600084838a0281610c1857fe5b049050600082118015610c2b5750600081115b610c475760405162461bcd60e51b81526004016106cd9061355a565b8382018382016000610c59838361165b565b9050610c63610553565b600f0b81600f0b1215610c885760405162461bcd60e51b81526004016106cd90613662565b6002890180548d019055600d805460ff19166001179055600c80548d0190556000610cb16116cd565b90506000610cbd6104a3565b60405163410eda9560e11b8152909150339063821db52a90610ce5908a908a90600401613859565b600060405180830381600087803b158015610cff57600080fd5b505af1158015610d13573d6000803e3d6000fd5b50505050868201610d226116cd565b1015610d405760405162461bcd60e51b81526004016106cd906135c9565b858101610d4b6104a3565b1015610d695760405162461bcd60e51b81526004016106cd906134c3565b5050610d75838361171c565b610d7f8e8e6118b0565b8c336001600160a01b03167f11d0107c133e58a738f24960e01850fa75840d805eb92836de8035242b342c348787604051610dbb929190613859565b60405180910390a350909c909b509950505050505050505050565b60408051606081018252600554808252600654602083015260075492820192909252600091158015610e0a57506020810151155b610e265760405162461bcd60e51b81526004016106cd90613699565b610e30848461171c565b5060019392505050565b683635c9adc5dea0000081565b6000610e5385856117de565b8054600880546001600160a01b0319166001600160a01b039092169190911790556001808201546009556002820154600a8190556003830154600b556004830154600c55600590920154600d805460ff909216151560ff19928316179091169091179055831115610ed65760405162461bcd60e51b81526004016106cd9061350e565b600b54821115610ef85760405162461bcd60e51b81526004016106cd906136d0565b600a80548490039055600b805483900390556000610f146116cd565b90506000610f206104a3565b604051633a57bfdf60e11b815290915060009033906374af7fbe90610f4b9089908990600401613859565b602060405180830381600087803b158015610f6557600080fd5b505af1158015610f79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9d91906132c2565b9050610fd36001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168288611ad2565b6110076001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168287611ad2565b61100f6116cd565b86840310156110305760405162461bcd60e51b81526004016106cd906135c9565b6110386104a3565b85830310156110595760405162461bcd60e51b81526004016106cd906134c3565b505050336001600160a01b03167fa8d23733bdb6b6501ae798968944ff3c395cf47459a57ea862484108b86a88c860086040516109859190613805565b6000806110a333856117de565b8054600880546001600160a01b0319166001600160a01b0390921691909117905560018101546009556002810154600a556003810154600b556004810154600c55600590810154600d805460ff909216151560ff19909216919091179055600754806111215760405162461bcd60e51b81526004016106cd906134a0565b815460018301546000838884028161113557fe5b049050600084838a028161114557fe5b0490506000821180156111585750600081115b6111745760405162461bcd60e51b81526004016106cd9061355a565b8184038184036000611186838361165b565b905080600f0b611194610553565b600f0b12156111b55760405162461bcd60e51b81526004016106cd90613662565b8b896002015410156111d95760405162461bcd60e51b81526004016106cd906135a1565b6002890180548d90039055600d805460ff19166001179055600c548c11156112135760405162461bcd60e51b81526004016106cd90613534565b600c80548d90039055600a805486019055600b805485019055611236838361171c565b611240338e6118b0565b8c336001600160a01b03167fa088eb35c82c571c8b3364dab1932e11add4fbe38412e19af8314a3e45da1ca1878760405161127c929190613859565b60405180910390a350909b909a5098505050505050505050565b6103e881565b600454600160201b900463ffffffff16156112c95760405162461bcd60e51b81526004016106cd90613699565b60008163ffffffff16116112ef5760405162461bcd60e51b81526004016106cd906134eb565b6000831161130f5760405162461bcd60e51b81526004016106cd906135f1565b60008263ffffffff16116113355760405162461bcd60e51b81526004016106cd9061372d565b604080516060808201835285825263ffffffff9485166020808401829052949095169183018290526003959095556004805463ffffffff191690941767ffffffff000000001916600160201b90910217909255815192830182526000808452908301819052683635c9adc5dea00000929091018290526005819055600655600755565b60035460045463ffffffff80821691600160201b90041683565b6040805160608101825260035480825260045463ffffffff80821660208501819052600160201b9092041693830184905260055460009461059c939192906119d0565b61141d61326d565b5060408051606081018252600354815260045463ffffffff8082166020840152600160201b909104169181019190915290565b60008061145c83611b3e565b905061146781611b5c565b9392505050565b60408051606081018252600354815260045463ffffffff80821660208401819052600160201b9092041692820183905260009261059c9190611c5c565b60055460065460075483565b60006114c385856117de565b8054600880546001600160a01b0319166001600160a01b0390921691909117905560018101546009556002810154600a556003810154600b556004810154600c55600590810154600d805460ff909216151560ff1990921691909117905580546006546000611530610553565b9050600061153d88610ad0565b90506000611552610685600f85900b84611854565b9050600084821161156557818503611569565b8482035b90506103e8810401808910156115915760405162461bcd60e51b81526004016106cd90613751565b89860385820160006115a3838361165b565b905086600f0b81600f0b12156115cb5760405162461bcd60e51b81526004016106cd90613662565b600d805460ff19166001179055600a80548e019055600b548411156116025760405162461bcd60e51b81526004016106cd906136d0565b600b80548590039055611615838361171c565b61161f8f8f6118b0565b8d336001600160a01b03167ff5bc1c62cbb5b6893dbca14f8dad74fb9485af69c7cdd44e5705cf2f31b27f228f876040516107a0929190613859565b6040805160608101825260035480825260045463ffffffff80821660208501819052600160201b909204169383018490526000938492610a61928892889291906117a9565b6116a861328d565b5060408051606081018252600554815260065460208201526007549181019190915290565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906104f290309060040161343e565b60058281556006829055600080548401815560018054840190554360028190556040517f40c2d32ec54ffac45999120b79eb2516538010ed69ffd59c3f8a184d83b1309e9161176e9187918791613867565b60405180910390a150505050565b61178461328d565b5060408051606081018252600054815260015460208201526002549181019190915290565b6000806117b8878686866119d0565b905060006117d2826117c989611c90565b600f0b90611ca4565b98975050505050505050565b60008083836040516020016117f492919061341c565b60408051601f1981840301815291815281516020928301206000818152600e90935291208054919250906001600160a01b031661184c5780546001600160a01b0319166001600160a01b038616178155600181018490555b949350505050565b6000600f83810b9083900b0160016001607f1b0319811280159061187f575060016001607f1b038113155b61146757600080fd5b60006305f5e10061189883611a85565b670de0b6b3a764000002816118a957fe5b0492915050565b600d5460ff166118d25760405162461bcd60e51b81526004016106cd90613639565b60006118de83836117de565b6040805160c0810182526008546001600160a01b039081168083526009546020840152600a5493830193909352600b546060830152600c546080830152600d5460ff16151560a083015283549394509092161461194d5760405162461bcd60e51b81526004016106cd90613616565b80602001518260010154146119745760405162461bcd60e51b81526004016106cd9061357e565b6040810151600283015560608101516003830155608001516004820155600501805460ff19908116909155600880546001600160a01b031916905560006009819055600a819055600b819055600c55600d805490911690555050565b6000806119dc85611c90565b905060006119ea8585611c5c565b905060006119f86001611b3e565b90506000611a0582611b5c565b90506000611a128a611c90565b90506000611a5d6927100000000000000000611a54876117c983611a4b611a3d600f8c900b8a611ca4565b611a4b600f8d900b8c611cd7565b600f0b90611d29565b600f0b90611cd7565b9050611a76611a6b82611b5c565b600f88900b90611d29565b9b9a5050505050505050505050565b6000611aa2611a976305f5e100611b3e565b600f84900b90611d29565b9150600082600f0b13611ab6576000610a34565b611ac282600f0b611d5f565b67ffffffffffffffff1692915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b179052611b39908490611d7b565b505050565b6000677fffffffffffffff821115611b5557600080fd5b5060401b90565b60006753dd02a4f5ee2e4681611b726001611b3e565b90506000611b806002611b3e565b905067413c831bb169f8746748d4c730f051a5fd1968016a09e667f3bcc90868017401c57014c38f131968010fb844255a12d72e6000611bc4600f8c900b85611cd7565b90506000611bfe611bf3611be8611bdd85600f0b611e2c565b600f8e900b90611d29565b600f8c900b90611854565b600f8b900b90611cd7565b90506000611c0c8383611e5f565b9050600083600f0b1215611c2957611c2681600f0b611f5e565b90505b6000611c4a611c3c600f8d900b84611854565b611a4b600f8e900b8d611cd7565b9e9d5050505050505050505050505050565b600080611c73611c6b84611f79565b600f0b611fa6565b90506000611c8085611b3e565b9050610a61600f82900b83611d29565b6000610a3482670de0b6b3a7640000611fc8565b6000600f82810b9084900b0360016001607f1b0319811280159061187f575060016001607f1b0381131561146757600080fd5b600081600f0b60001415611cea57600080fd5b600082600f0b604085600f0b901b81611cff57fe5b05905060016001607f1b0319811280159061187f575060016001607f1b0381131561146757600080fd5b6000600f83810b9083900b0260401d60016001607f1b0319811280159061187f575060016001607f1b0381131561146757600080fd5b60008082600f0b1215611d7157600080fd5b50600f0b60401d90565b6000611dd0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611fff9092919063ffffffff16565b805190915015611b3957808060200190516020811015611def57600080fd5b5051611b395760405162461bcd60e51b815260040180806020018281038252602a8152602001806138d8602a913960400191505060405180910390fd5b6000600f82900b60016001607f1b03191415611e4757600080fd5b600082600f0b12611e585781610a34565b5060000390565b60008068016a09e667f3bcc90868017401c57014c38f131968010fb844255a12d72e611ebc611a6b611eb1611ea6611e9b600f8b900b86611d29565b600f87900b90611854565b600f8a900b90611d29565b600f86900b90611854565b9350505050600080611ece6001611b3e565b905067413c831bb169f8746748d4c730f051a5fd196000611f0b611f00611ef58489611854565b600f8b900b90611d29565b600f85900b90611854565b9050611f51611f46611ef5611f3b611f33611f2b600f8f900b600261200e565b600f0b611f5e565b600f0b61209e565b600f85900b90611d29565b600f86900b90611ca4565b9998505050505050505050565b6000600f82900b60016001607f1b03191415611e5857600080fd5b600080611f8583611b3e565b90506000611f966301dfe200611b3e565b9050610801600f83900b82611cd7565b60008082600f0b1215611fb857600080fd5b610a34604083600f0b901b6120f8565b600081611fd457600080fd5b6000611fe0848461223e565b905060016001607f1b036001600160801b038216111561146757600080fd5b606061184c8484600085612398565b60008060008085600f0b126120355761202e603f86600f0b901b856124f3565b9150612059565b61204f603f866000036001600160801b0316901b856124f3565b9150506001831615155b603f82901c91508015612082576001607f1b82111561207757600080fd5b506000039050610a34565b60016001607f1b0382111561209657600080fd5b509050610a34565b60006840000000000000000082600f0b126120b857600080fd5b683fffffffffffffffff1982600f0b12156120d557506000610806565b610a34608083600f0b700171547652b82fe1777d0ffda0d23a7d1202901d6126c5565b60008161210757506000610806565b816001600160801b82106121205760809190911c9060401b5b68010000000000000000821061213b5760409190911c9060201b5b600160201b82106121515760209190911c9060101b5b6201000082106121665760109190911c9060081b5b610100821061217a5760089190911c9060041b5b6010821061218d5760049190911c9060021b5b600882106121995760011b5b60018185816121a457fe5b048201901c905060018185816121b657fe5b048201901c905060018185816121c857fe5b048201901c905060018185816121da57fe5b048201901c905060018185816121ec57fe5b048201901c905060018185816121fe57fe5b048201901c9050600181858161221057fe5b048201901c9050600081858161222257fe5b0490508082106122325780612234565b815b9350505050610806565b60008161224a57600080fd5b600077ffffffffffffffffffffffffffffffffffffffffffffffff84116122805782604085901b8161227857fe5b049050612384565b60c084811c600160201b8110612298576020918201911c5b6201000081106122aa576010918201911c5b61010081106122bb576008918201911c5b601081106122cb576004918201911c5b600481106122db576002918201911c5b600281106122ea576001820191505b60bf820360018603901c6001018260ff0387901b8161230557fe5b0492506001600160801b0383111561231c57600080fd5b608085901c83026001600160801b038616840260c088901c604089901b82811015612348576001820391505b608084901b9290038281101561235f576001820391505b829003608084901c821461236f57fe5b88818161237857fe5b04870196505050505050505b6001600160801b0381111561146757600080fd5b6060824710156123d95760405162461bcd60e51b81526004018080602001828103825260268152602001806138b26026913960400191505060405180910390fd5b6123e285613182565b612433576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b602083106124715780518252601f199092019160209182019101612452565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146124d3576040519150601f19603f3d011682016040523d82523d6000602084013e6124d8565b606091505b50915091506124e8828286613188565b979650505050505050565b60008161250557506001607f1b610a34565b8261251257506000610a34565b600083600160801b8110612528576080918201911c5b680100000000000000008110612540576040918201911c5b600160201b8110612553576020918201911c5b620100008110612565576010918201911c5b6101008110612576576008918201911c5b60108110612586576004918201911c5b60048110612596576002918201911c5b600281106125a5576001820191505b607e19820160008113156125bc5794851c946125c6565b8060000386901b95505b6001607f1b60005b86156126945760018716156126365760001990960195908702908201600160ff1b82106126045760809190911c9060010161260c565b607f82901c91505b607e1981121561262457600095505050505050610a34565b6080811261263157600080fd5b61268f565b96800296600196871c969290921b91600160ff1b881061266257608088901c975060018301925061266a565b607f88901c97505b607e1983121561268257600095505050505050610a34565b6080831261268f57600080fd5b6125ce565b60008113156126a65790811b906126b9565b60008112156126b9578060000382901c91505b509350610a3492505050565b60006840000000000000000082600f0b126126df57600080fd5b683fffffffffffffffff1982600f0b12156126fc57506000610806565b6001607f1b60006780000000000000008416600f0b131561272e5770016a09e667f3bcc908b2fb1366ea957d3e0260801c5b60008367400000000000000016600f0b131561275b577001306fe0a31b7152de8d5a46305c85edec0260801c5b60008367200000000000000016600f0b1315612788577001172b83c7d517adcdf7c8c50eb14a791f0260801c5b60008367100000000000000016600f0b13156127b55770010b5586cf9890f6298b92b71842a983630260801c5b60008367080000000000000016600f0b13156127e2577001059b0d31585743ae7c548eb68ca417fd0260801c5b60008367040000000000000016600f0b131561280f57700102c9a3e778060ee6f7caca4f7a29bde80260801c5b60008367020000000000000016600f0b131561283c5770010163da9fb33356d84a66ae336dcdfa3f0260801c5b60008367010000000000000016600f0b131561286957700100b1afa5abcbed6129ab13ec11dc95430260801c5b600083668000000000000016600f0b13156128955770010058c86da1c09ea1ff19d294cf2f679b0260801c5b600083664000000000000016600f0b13156128c1577001002c605e2e8cec506d21bfc89a23a00f0260801c5b600083662000000000000016600f0b13156128ed57700100162f3904051fa128bca9c55c31e5df0260801c5b600083661000000000000016600f0b1315612919577001000b175effdc76ba38e31671ca9397250260801c5b600083660800000000000016600f0b131561294557700100058ba01fb9f96d6cacd4b180917c3d0260801c5b600083660400000000000016600f0b13156129715770010002c5cc37da9491d0985c348c68e7b30260801c5b600083660200000000000016600f0b131561299d577001000162e525ee054754457d59952920260260801c5b600083660100000000000016600f0b13156129c95770010000b17255775c040618bf4a4ade83fc0260801c5b6000836580000000000016600f0b13156129f4577001000058b91b5bc9ae2eed81e9b7d4cfab0260801c5b6000836540000000000016600f0b1315612a1f57700100002c5c89d5ec6ca4d7c8acc017b7c90260801c5b6000836520000000000016600f0b1315612a4a5770010000162e43f4f831060e02d839a9d16d0260801c5b6000836510000000000016600f0b1315612a7557700100000b1721bcfc99d9f890ea069117630260801c5b6000836508000000000016600f0b1315612aa05770010000058b90cf1e6d97f9ca14dbcc16280260801c5b6000836504000000000016600f0b1315612acb577001000002c5c863b73f016468f6bac5ca2b0260801c5b6000836502000000000016600f0b1315612af657700100000162e430e5a18f6119e3c02282a50260801c5b6000836501000000000016600f0b1315612b21577001000000b1721835514b86e6d96efd1bfe0260801c5b60008364800000000016600f0b1315612b4b57700100000058b90c0b48c6be5df846c5b2ef0260801c5b60008364400000000016600f0b1315612b755770010000002c5c8601cc6b9e94213c72737a0260801c5b60008364200000000016600f0b1315612b9f577001000000162e42fff037df38aa2b219f060260801c5b60008364100000000016600f0b1315612bc95770010000000b17217fba9c739aa5819f44f90260801c5b60008364080000000016600f0b1315612bf3577001000000058b90bfcdee5acd3c1cedc8230260801c5b60008364040000000016600f0b1315612c1d57700100000002c5c85fe31f35a6a30da1be500260801c5b60008364020000000016600f0b1315612c475770010000000162e42ff0999ce3541b9fffcf0260801c5b600083600160201b16600f0b1315612c7057700100000000b17217f80f4ef5aadda455540260801c5b600083638000000016600f0b1315612c995770010000000058b90bfbf8479bd5a81b51ad0260801c5b600083634000000016600f0b1315612cc2577001000000002c5c85fdf84bd62ae30a74cc0260801c5b600083632000000016600f0b1315612ceb57700100000000162e42fefb2fed257559bdaa0260801c5b600083631000000016600f0b1315612d14577001000000000b17217f7d5a7716bba4a9ae0260801c5b600083630800000016600f0b1315612d3d57700100000000058b90bfbe9ddbac5e109cce0260801c5b600083630400000016600f0b1315612d665770010000000002c5c85fdf4b15de6f17eb0d0260801c5b600083630200000016600f0b1315612d8f577001000000000162e42fefa494f1478fde050260801c5b600083630100000016600f0b1315612db85770010000000000b17217f7d20cf927c8e94c0260801c5b6000836280000016600f0b1315612de0577001000000000058b90bfbe8f71cb4e4b33d0260801c5b6000836240000016600f0b1315612e0857700100000000002c5c85fdf477b662b269450260801c5b6000836220000016600f0b1315612e305770010000000000162e42fefa3ae53369388c0260801c5b6000836210000016600f0b1315612e5857700100000000000b17217f7d1d351a389d400260801c5b6000836208000016600f0b1315612e805770010000000000058b90bfbe8e8b2d3d4ede0260801c5b6000836204000016600f0b1315612ea8577001000000000002c5c85fdf4741bea6e77e0260801c5b6000836202000016600f0b1315612ed057700100000000000162e42fefa39fe95583c20260801c5b6000836201000016600f0b1315612ef8577001000000000000b17217f7d1cfb72b45e10260801c5b60008361800016600f0b1315612f1f57700100000000000058b90bfbe8e7cc35c3f00260801c5b60008361400016600f0b1315612f465770010000000000002c5c85fdf473e242ea380260801c5b60008361200016600f0b1315612f6d577001000000000000162e42fefa39f02b772c0260801c5b60008361100016600f0b1315612f945770010000000000000b17217f7d1cf7d83c1a0260801c5b60008361080016600f0b1315612fbb577001000000000000058b90bfbe8e7bdcbe2e0260801c5b60008361040016600f0b1315612fe257700100000000000002c5c85fdf473dea871f0260801c5b60008361020016600f0b13156130095770010000000000000162e42fefa39ef44d910260801c5b60008361010016600f0b131561303057700100000000000000b17217f7d1cf79e9490260801c5b600083608016600f0b13156130565770010000000000000058b90bfbe8e7bce5440260801c5b600083604016600f0b131561307c577001000000000000002c5c85fdf473de6eca0260801c5b600083602016600f0b13156130a257700100000000000000162e42fefa39ef366f0260801c5b600083601016600f0b13156130c8577001000000000000000b17217f7d1cf79afa0260801c5b600083600816600f0b13156130ee57700100000000000000058b90bfbe8e7bcd6d0260801c5b600083600416600f0b13156131145770010000000000000002c5c85fdf473de6b20260801c5b600083600216600f0b131561313a577001000000000000000162e42fefa39ef3580260801c5b600083600116600f0b13156131605770010000000000000000b17217f7d1cf79ab0260801c5b600f83810b60401d603f03900b1c60016001607f1b03811115610a3457600080fd5b3b151590565b60608315613197575081611467565b8251156131a75782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156131f15781810151838201526020016131d9565b50505050905090810190601f16801561321e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6040518060c0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000151581525090565b604080516060810182526000808252602082018190529181019190915290565b60405180606001604052806000815260200160008152602001600081525090565b803563ffffffff8116811461080657600080fd5b6000602082840312156132d3578081fd5b815161146781613899565b600080604083850312156132f0578081fd5b82356132fb81613899565b946020939093013593505050565b60008060006060848603121561331d578081fd5b833561332881613899565b95602085013595506040909401359392505050565b60008060008060808587031215613352578081fd5b843561335d81613899565b966020860135965060408601359560600135945092505050565b600060208284031215613388578081fd5b5035919050565b6000602082840312156133a0578081fd5b5051919050565b600080604083850312156133b9578182fd5b50508035926020909101359150565b6000806000606084860312156133dc578283fd5b833592506133ec602085016132ae565b91506133fa604085016132ae565b90509250925092565b8051825260208082015190830152604090810151910152565b60609290921b6bffffffffffffffffffffffff19168252601482015260340190565b6001600160a01b0391909116815260200190565b6001600160a01b039690961686526020860194909452604085019290925260608401526080830152151560a082015260c00190565b901515815260200190565b600f9190910b815260200190565b602080825260099082015268139bdd08189bdd5b9960ba1b604082015260600190565b6020808252600e908201526d2737ba1032b737bab3b4102a2c9960911b604082015260600190565b602080825260099082015268054696d6520697320360bc1b604082015260600190565b6020808252600c908201526b09cdee840cadcdeeaced040b60a31b604082015260600190565b6020808252600c908201526b139bdd08195b9bdd59da081360a21b604082015260600190565b6020808252600a9082015269044656c746120697320360b41b604082015260600190565b6020808252600990820152684e6f74206e6f6e636560b81b604082015260600190565b6020808252600e908201526d20b137bb329036b0bc10313ab93760911b604082015260600190565b6020808252600e908201526d4e6f7420656e6f7567682054583160901b604082015260600190565b6020808252600b908201526a0537472696b6520697320360ac1b604082015260600190565b6020808252600990820152682737ba1037bbb732b960b91b604082015260600190565b6020808252600f908201526e141bdcda5d1a5bdb881b1bd8dad959608a1b604082015260600190565b60208082526011908201527f496e76616c696420696e76617269616e74000000000000000000000000000000604082015260600190565b60208082526013908201527f416c726561647920696e697469616c697a656400000000000000000000000000604082015260600190565b6020808252600c908201526b4e6f7420656e6f756768205960a01b604082015260600190565b60208082526014908201527f4e6f7420656e6f75676820592072656d6f766564000000000000000000000000604082015260600190565b6020808252600a908201526905369676d6120697320360b41b604082015260600190565b60208082526010908201526f151bdbc81b5d58da081648185919195960821b604082015260600190565b60608101610a348284613403565b8151815260208083015163ffffffff90811691830191909152604092830151169181019190915260600190565b600060c0820190506001600160a01b0383511682526020830151602083015260408301516040830152606083015160608301526080830151608083015260a0830151151560a083015292915050565b81546001600160a01b031681526001820154602082015260028201546040820152600382015460608201526004820154608082015260059091015460ff16151560a082015260c00190565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b92835263ffffffff918216602084015216604082015260600190565b6001600160a01b03811681146138ae57600080fd5b5056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212201db2cb6487d57d37de651f0761be05f5c8113138d15639746507ca41d407066464736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102115760003560e01c80638fb4b57311610125578063cef42bc2116100ad578063d4be70f31161007c578063d4be70f314610458578063e00323831461046b578063e3775d7914610480578063f133a7c614610488578063ff40807b1461049b57610211565b8063cef42bc214610422578063cfe703b614610435578063d211fd181461043d578063d29d53e81461044557610211565b8063c57981b5116100f4578063c57981b5146103d1578063c866c218146103d9578063cabeb725146103ee578063cc85d00b14610405578063cdc0c82d1461040d57610211565b80638fb4b57314610390578063956cc859146103a3578063b76da050146103ab578063bcb4aff8146103be57610211565b80633adbb5af116101a85780635d719c63116101775780635d719c63146103235780636c3686921461033657806372e8b44814610349578063867886431461035c5780638b99bcb51461036f57610211565b80633adbb5af146102d5578063401e52f9146102f55780634ba1502814610308578063514ea4bf1461031057610211565b80631157c2d2116101e45780631157c2d21461027a57806332112d091461028f57806338f05975146102a25780633a6d00b3146102b557610211565b8063018ad9c314610216578063033811541461023457806307f293f71461024b5780630f0dab5114610260575b600080fd5b61021e6104a3565b60405161022b9190613850565b60405180910390f35b61023c610547565b60405161022b93929190613867565b610253610553565b60405161022b9190613492565b6102686105a2565b60405161022b96959493929190613452565b6102826105c6565b60405161022b919061343e565b61021e61029d36600461333d565b6105ea565b6102536102b0366004613377565b6107bb565b6102c86102c336600461333d565b61080b565b60405161022b9190613487565b6102e86102e33660046132de565b6109a2565b60405161022b91906137b6565b61021e610303366004613377565b610a3a565b610282610a6a565b61026861031e366004613377565b610a8e565b610253610331366004613377565b610ad0565b61021e610344366004613377565b610b17565b61021e610357366004613377565b610b49565b61021e61036a366004613377565b610b5d565b61038261037d366004613309565b610b69565b60405161022b929190613859565b6102c861039e3660046133a7565b610dd6565b61021e610e3a565b6102c86103b936600461333d565b610e47565b6103826103cc3660046133a7565b611096565b61021e611296565b6103ec6103e73660046133c8565b61129c565b005b6103f66113b8565b60405161022b9392919061387d565b6102536113d2565b610415611415565b60405161022b9190613789565b610253610430366004613377565b611450565b61025361146e565b61023c6114ab565b61021e61045336600461333d565b6114b7565b6102536104663660046133a7565b61165b565b6104736116a0565b60405161022b919061377b565b61021e6116cd565b6103ec6104963660046133a7565b61171c565b61047361177c565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906104f290309060040161343e565b60206040518083038186803b15801561050a57600080fd5b505afa15801561051e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610542919061338f565b905090565b60005460015460025483565b6040805160608101825260035480825260045463ffffffff80821660208501819052600160201b9092041693830184905260055460065460009561059c949293919291906117a9565b91505090565b600854600954600a54600b54600c54600d546001600160a01b039095169460ff1686565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006105f685856117de565b8054600880546001600160a01b0319166001600160a01b0390921691909117905560018101546009556002810154600a556003810154600b556004810154600c55600590810154600d805460ff909216151560ff1990921691909117905580546006546000610663610553565b90506000610670886107bb565b9050600061068d610685600f85900b84611854565b600f0b611888565b905060008482116106a0578185036106a4565b8482035b90506103e881049003888110156106d65760405162461bcd60e51b81526004016106cd906136f6565b60405180910390fd5b858a0181860360006106e8838361165b565b905086600f0b81600f0b12156107105760405162461bcd60e51b81526004016106cd90613662565b600d805460ff19166001179055600a548d111561073f5760405162461bcd60e51b81526004016106cd9061350e565b600a80548e90039055600b80548501905561075a838361171c565b6107648f8f6118b0565b8d336001600160a01b03167f90bad5276a3a095ef9c17490bcb0fd083cd093442264757cc032c9237ebfda8e8f876040516107a0929190613859565b60405180910390a350919d9c50505050505050505050505050565b6040805160608101825260035480825260045463ffffffff80821660208501819052600160201b90920416938301849052600554600094908601926108019284926119d0565b925050505b919050565b600061081785856117de565b8054600880546001600160a01b0319166001600160a01b039092169190911790556001808201546009556002820154600a8181556003840154600b8181556004860154600c55600590950154600d805460ff909216151560ff199283161790911690941790935590860190558301905560006108916116cd565b9050600061089d6104a3565b604051637f23fb3f60e01b81529091503390637f23fb3f906108c59088908890600401613859565b600060405180830381600087803b1580156108df57600080fd5b505af11580156108f3573d6000803e3d6000fd5b505050508482016109026116cd565b10156109205760405162461bcd60e51b81526004016106cd906135c9565b83810161092b6104a3565b10156109495760405162461bcd60e51b81526004016106cd906134c3565b5050336001600160a01b03167fa8d23733bdb6b6501ae798968944ff3c395cf47459a57ea862484108b86a88c860086040516109859190613805565b60405180910390a261099785856118b0565b506001949350505050565b6109aa61322c565b600083836040516020016109bf92919061341c565b60408051601f1981840301815282825280516020918201206000908152600e825282902060c08401835280546001600160a01b0316845260018101549184019190915260028101549183019190915260038101546060830152600481015460808301526005015460ff16151560a08201529150505b92915050565b600080610a4683610b49565b6006549091506000818311610a5d57828203610a61565b8183035b95945050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600e602052600090815260409020805460018201546002830154600384015460048501546005909501546001600160a01b039094169492939192909160ff1686565b6040805160608101825260035480825260045463ffffffff80821660208501819052600160201b9092041693830184905260055460009490869003926108019284926119d0565b6000806305f5e100610b30610b2b85610ad0565b611a85565b670de0b6b3a76400000281610b4157fe5b049392505050565b6000806305f5e100610b30610b2b856107bb565b600080610a4683610b17565b600080610b7685856117de565b8054600880546001600160a01b0319166001600160a01b0390921691909117905560018101546009556002810154600a556003810154600b556004810154600c55600590810154600d805460ff909216151560ff1990921691909117905560075480610bf45760405162461bcd60e51b81526004016106cd906134a0565b8154600183015460008388840281610c0857fe5b049050600084838a0281610c1857fe5b049050600082118015610c2b5750600081115b610c475760405162461bcd60e51b81526004016106cd9061355a565b8382018382016000610c59838361165b565b9050610c63610553565b600f0b81600f0b1215610c885760405162461bcd60e51b81526004016106cd90613662565b6002890180548d019055600d805460ff19166001179055600c80548d0190556000610cb16116cd565b90506000610cbd6104a3565b60405163410eda9560e11b8152909150339063821db52a90610ce5908a908a90600401613859565b600060405180830381600087803b158015610cff57600080fd5b505af1158015610d13573d6000803e3d6000fd5b50505050868201610d226116cd565b1015610d405760405162461bcd60e51b81526004016106cd906135c9565b858101610d4b6104a3565b1015610d695760405162461bcd60e51b81526004016106cd906134c3565b5050610d75838361171c565b610d7f8e8e6118b0565b8c336001600160a01b03167f11d0107c133e58a738f24960e01850fa75840d805eb92836de8035242b342c348787604051610dbb929190613859565b60405180910390a350909c909b509950505050505050505050565b60408051606081018252600554808252600654602083015260075492820192909252600091158015610e0a57506020810151155b610e265760405162461bcd60e51b81526004016106cd90613699565b610e30848461171c565b5060019392505050565b683635c9adc5dea0000081565b6000610e5385856117de565b8054600880546001600160a01b0319166001600160a01b039092169190911790556001808201546009556002820154600a8190556003830154600b556004830154600c55600590920154600d805460ff909216151560ff19928316179091169091179055831115610ed65760405162461bcd60e51b81526004016106cd9061350e565b600b54821115610ef85760405162461bcd60e51b81526004016106cd906136d0565b600a80548490039055600b805483900390556000610f146116cd565b90506000610f206104a3565b604051633a57bfdf60e11b815290915060009033906374af7fbe90610f4b9089908990600401613859565b602060405180830381600087803b158015610f6557600080fd5b505af1158015610f79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9d91906132c2565b9050610fd36001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168288611ad2565b6110076001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168287611ad2565b61100f6116cd565b86840310156110305760405162461bcd60e51b81526004016106cd906135c9565b6110386104a3565b85830310156110595760405162461bcd60e51b81526004016106cd906134c3565b505050336001600160a01b03167fa8d23733bdb6b6501ae798968944ff3c395cf47459a57ea862484108b86a88c860086040516109859190613805565b6000806110a333856117de565b8054600880546001600160a01b0319166001600160a01b0390921691909117905560018101546009556002810154600a556003810154600b556004810154600c55600590810154600d805460ff909216151560ff19909216919091179055600754806111215760405162461bcd60e51b81526004016106cd906134a0565b815460018301546000838884028161113557fe5b049050600084838a028161114557fe5b0490506000821180156111585750600081115b6111745760405162461bcd60e51b81526004016106cd9061355a565b8184038184036000611186838361165b565b905080600f0b611194610553565b600f0b12156111b55760405162461bcd60e51b81526004016106cd90613662565b8b896002015410156111d95760405162461bcd60e51b81526004016106cd906135a1565b6002890180548d90039055600d805460ff19166001179055600c548c11156112135760405162461bcd60e51b81526004016106cd90613534565b600c80548d90039055600a805486019055600b805485019055611236838361171c565b611240338e6118b0565b8c336001600160a01b03167fa088eb35c82c571c8b3364dab1932e11add4fbe38412e19af8314a3e45da1ca1878760405161127c929190613859565b60405180910390a350909b909a5098505050505050505050565b6103e881565b600454600160201b900463ffffffff16156112c95760405162461bcd60e51b81526004016106cd90613699565b60008163ffffffff16116112ef5760405162461bcd60e51b81526004016106cd906134eb565b6000831161130f5760405162461bcd60e51b81526004016106cd906135f1565b60008263ffffffff16116113355760405162461bcd60e51b81526004016106cd9061372d565b604080516060808201835285825263ffffffff9485166020808401829052949095169183018290526003959095556004805463ffffffff191690941767ffffffff000000001916600160201b90910217909255815192830182526000808452908301819052683635c9adc5dea00000929091018290526005819055600655600755565b60035460045463ffffffff80821691600160201b90041683565b6040805160608101825260035480825260045463ffffffff80821660208501819052600160201b9092041693830184905260055460009461059c939192906119d0565b61141d61326d565b5060408051606081018252600354815260045463ffffffff8082166020840152600160201b909104169181019190915290565b60008061145c83611b3e565b905061146781611b5c565b9392505050565b60408051606081018252600354815260045463ffffffff80821660208401819052600160201b9092041692820183905260009261059c9190611c5c565b60055460065460075483565b60006114c385856117de565b8054600880546001600160a01b0319166001600160a01b0390921691909117905560018101546009556002810154600a556003810154600b556004810154600c55600590810154600d805460ff909216151560ff1990921691909117905580546006546000611530610553565b9050600061153d88610ad0565b90506000611552610685600f85900b84611854565b9050600084821161156557818503611569565b8482035b90506103e8810401808910156115915760405162461bcd60e51b81526004016106cd90613751565b89860385820160006115a3838361165b565b905086600f0b81600f0b12156115cb5760405162461bcd60e51b81526004016106cd90613662565b600d805460ff19166001179055600a80548e019055600b548411156116025760405162461bcd60e51b81526004016106cd906136d0565b600b80548590039055611615838361171c565b61161f8f8f6118b0565b8d336001600160a01b03167ff5bc1c62cbb5b6893dbca14f8dad74fb9485af69c7cdd44e5705cf2f31b27f228f876040516107a0929190613859565b6040805160608101825260035480825260045463ffffffff80821660208501819052600160201b909204169383018490526000938492610a61928892889291906117a9565b6116a861328d565b5060408051606081018252600554815260065460208201526007549181019190915290565b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a08231906104f290309060040161343e565b60058281556006829055600080548401815560018054840190554360028190556040517f40c2d32ec54ffac45999120b79eb2516538010ed69ffd59c3f8a184d83b1309e9161176e9187918791613867565b60405180910390a150505050565b61178461328d565b5060408051606081018252600054815260015460208201526002549181019190915290565b6000806117b8878686866119d0565b905060006117d2826117c989611c90565b600f0b90611ca4565b98975050505050505050565b60008083836040516020016117f492919061341c565b60408051601f1981840301815291815281516020928301206000818152600e90935291208054919250906001600160a01b031661184c5780546001600160a01b0319166001600160a01b038616178155600181018490555b949350505050565b6000600f83810b9083900b0160016001607f1b0319811280159061187f575060016001607f1b038113155b61146757600080fd5b60006305f5e10061189883611a85565b670de0b6b3a764000002816118a957fe5b0492915050565b600d5460ff166118d25760405162461bcd60e51b81526004016106cd90613639565b60006118de83836117de565b6040805160c0810182526008546001600160a01b039081168083526009546020840152600a5493830193909352600b546060830152600c546080830152600d5460ff16151560a083015283549394509092161461194d5760405162461bcd60e51b81526004016106cd90613616565b80602001518260010154146119745760405162461bcd60e51b81526004016106cd9061357e565b6040810151600283015560608101516003830155608001516004820155600501805460ff19908116909155600880546001600160a01b031916905560006009819055600a819055600b819055600c55600d805490911690555050565b6000806119dc85611c90565b905060006119ea8585611c5c565b905060006119f86001611b3e565b90506000611a0582611b5c565b90506000611a128a611c90565b90506000611a5d6927100000000000000000611a54876117c983611a4b611a3d600f8c900b8a611ca4565b611a4b600f8d900b8c611cd7565b600f0b90611d29565b600f0b90611cd7565b9050611a76611a6b82611b5c565b600f88900b90611d29565b9b9a5050505050505050505050565b6000611aa2611a976305f5e100611b3e565b600f84900b90611d29565b9150600082600f0b13611ab6576000610a34565b611ac282600f0b611d5f565b67ffffffffffffffff1692915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b179052611b39908490611d7b565b505050565b6000677fffffffffffffff821115611b5557600080fd5b5060401b90565b60006753dd02a4f5ee2e4681611b726001611b3e565b90506000611b806002611b3e565b905067413c831bb169f8746748d4c730f051a5fd1968016a09e667f3bcc90868017401c57014c38f131968010fb844255a12d72e6000611bc4600f8c900b85611cd7565b90506000611bfe611bf3611be8611bdd85600f0b611e2c565b600f8e900b90611d29565b600f8c900b90611854565b600f8b900b90611cd7565b90506000611c0c8383611e5f565b9050600083600f0b1215611c2957611c2681600f0b611f5e565b90505b6000611c4a611c3c600f8d900b84611854565b611a4b600f8e900b8d611cd7565b9e9d5050505050505050505050505050565b600080611c73611c6b84611f79565b600f0b611fa6565b90506000611c8085611b3e565b9050610a61600f82900b83611d29565b6000610a3482670de0b6b3a7640000611fc8565b6000600f82810b9084900b0360016001607f1b0319811280159061187f575060016001607f1b0381131561146757600080fd5b600081600f0b60001415611cea57600080fd5b600082600f0b604085600f0b901b81611cff57fe5b05905060016001607f1b0319811280159061187f575060016001607f1b0381131561146757600080fd5b6000600f83810b9083900b0260401d60016001607f1b0319811280159061187f575060016001607f1b0381131561146757600080fd5b60008082600f0b1215611d7157600080fd5b50600f0b60401d90565b6000611dd0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611fff9092919063ffffffff16565b805190915015611b3957808060200190516020811015611def57600080fd5b5051611b395760405162461bcd60e51b815260040180806020018281038252602a8152602001806138d8602a913960400191505060405180910390fd5b6000600f82900b60016001607f1b03191415611e4757600080fd5b600082600f0b12611e585781610a34565b5060000390565b60008068016a09e667f3bcc90868017401c57014c38f131968010fb844255a12d72e611ebc611a6b611eb1611ea6611e9b600f8b900b86611d29565b600f87900b90611854565b600f8a900b90611d29565b600f86900b90611854565b9350505050600080611ece6001611b3e565b905067413c831bb169f8746748d4c730f051a5fd196000611f0b611f00611ef58489611854565b600f8b900b90611d29565b600f85900b90611854565b9050611f51611f46611ef5611f3b611f33611f2b600f8f900b600261200e565b600f0b611f5e565b600f0b61209e565b600f85900b90611d29565b600f86900b90611ca4565b9998505050505050505050565b6000600f82900b60016001607f1b03191415611e5857600080fd5b600080611f8583611b3e565b90506000611f966301dfe200611b3e565b9050610801600f83900b82611cd7565b60008082600f0b1215611fb857600080fd5b610a34604083600f0b901b6120f8565b600081611fd457600080fd5b6000611fe0848461223e565b905060016001607f1b036001600160801b038216111561146757600080fd5b606061184c8484600085612398565b60008060008085600f0b126120355761202e603f86600f0b901b856124f3565b9150612059565b61204f603f866000036001600160801b0316901b856124f3565b9150506001831615155b603f82901c91508015612082576001607f1b82111561207757600080fd5b506000039050610a34565b60016001607f1b0382111561209657600080fd5b509050610a34565b60006840000000000000000082600f0b126120b857600080fd5b683fffffffffffffffff1982600f0b12156120d557506000610806565b610a34608083600f0b700171547652b82fe1777d0ffda0d23a7d1202901d6126c5565b60008161210757506000610806565b816001600160801b82106121205760809190911c9060401b5b68010000000000000000821061213b5760409190911c9060201b5b600160201b82106121515760209190911c9060101b5b6201000082106121665760109190911c9060081b5b610100821061217a5760089190911c9060041b5b6010821061218d5760049190911c9060021b5b600882106121995760011b5b60018185816121a457fe5b048201901c905060018185816121b657fe5b048201901c905060018185816121c857fe5b048201901c905060018185816121da57fe5b048201901c905060018185816121ec57fe5b048201901c905060018185816121fe57fe5b048201901c9050600181858161221057fe5b048201901c9050600081858161222257fe5b0490508082106122325780612234565b815b9350505050610806565b60008161224a57600080fd5b600077ffffffffffffffffffffffffffffffffffffffffffffffff84116122805782604085901b8161227857fe5b049050612384565b60c084811c600160201b8110612298576020918201911c5b6201000081106122aa576010918201911c5b61010081106122bb576008918201911c5b601081106122cb576004918201911c5b600481106122db576002918201911c5b600281106122ea576001820191505b60bf820360018603901c6001018260ff0387901b8161230557fe5b0492506001600160801b0383111561231c57600080fd5b608085901c83026001600160801b038616840260c088901c604089901b82811015612348576001820391505b608084901b9290038281101561235f576001820391505b829003608084901c821461236f57fe5b88818161237857fe5b04870196505050505050505b6001600160801b0381111561146757600080fd5b6060824710156123d95760405162461bcd60e51b81526004018080602001828103825260268152602001806138b26026913960400191505060405180910390fd5b6123e285613182565b612433576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b602083106124715780518252601f199092019160209182019101612452565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146124d3576040519150601f19603f3d011682016040523d82523d6000602084013e6124d8565b606091505b50915091506124e8828286613188565b979650505050505050565b60008161250557506001607f1b610a34565b8261251257506000610a34565b600083600160801b8110612528576080918201911c5b680100000000000000008110612540576040918201911c5b600160201b8110612553576020918201911c5b620100008110612565576010918201911c5b6101008110612576576008918201911c5b60108110612586576004918201911c5b60048110612596576002918201911c5b600281106125a5576001820191505b607e19820160008113156125bc5794851c946125c6565b8060000386901b95505b6001607f1b60005b86156126945760018716156126365760001990960195908702908201600160ff1b82106126045760809190911c9060010161260c565b607f82901c91505b607e1981121561262457600095505050505050610a34565b6080811261263157600080fd5b61268f565b96800296600196871c969290921b91600160ff1b881061266257608088901c975060018301925061266a565b607f88901c97505b607e1983121561268257600095505050505050610a34565b6080831261268f57600080fd5b6125ce565b60008113156126a65790811b906126b9565b60008112156126b9578060000382901c91505b509350610a3492505050565b60006840000000000000000082600f0b126126df57600080fd5b683fffffffffffffffff1982600f0b12156126fc57506000610806565b6001607f1b60006780000000000000008416600f0b131561272e5770016a09e667f3bcc908b2fb1366ea957d3e0260801c5b60008367400000000000000016600f0b131561275b577001306fe0a31b7152de8d5a46305c85edec0260801c5b60008367200000000000000016600f0b1315612788577001172b83c7d517adcdf7c8c50eb14a791f0260801c5b60008367100000000000000016600f0b13156127b55770010b5586cf9890f6298b92b71842a983630260801c5b60008367080000000000000016600f0b13156127e2577001059b0d31585743ae7c548eb68ca417fd0260801c5b60008367040000000000000016600f0b131561280f57700102c9a3e778060ee6f7caca4f7a29bde80260801c5b60008367020000000000000016600f0b131561283c5770010163da9fb33356d84a66ae336dcdfa3f0260801c5b60008367010000000000000016600f0b131561286957700100b1afa5abcbed6129ab13ec11dc95430260801c5b600083668000000000000016600f0b13156128955770010058c86da1c09ea1ff19d294cf2f679b0260801c5b600083664000000000000016600f0b13156128c1577001002c605e2e8cec506d21bfc89a23a00f0260801c5b600083662000000000000016600f0b13156128ed57700100162f3904051fa128bca9c55c31e5df0260801c5b600083661000000000000016600f0b1315612919577001000b175effdc76ba38e31671ca9397250260801c5b600083660800000000000016600f0b131561294557700100058ba01fb9f96d6cacd4b180917c3d0260801c5b600083660400000000000016600f0b13156129715770010002c5cc37da9491d0985c348c68e7b30260801c5b600083660200000000000016600f0b131561299d577001000162e525ee054754457d59952920260260801c5b600083660100000000000016600f0b13156129c95770010000b17255775c040618bf4a4ade83fc0260801c5b6000836580000000000016600f0b13156129f4577001000058b91b5bc9ae2eed81e9b7d4cfab0260801c5b6000836540000000000016600f0b1315612a1f57700100002c5c89d5ec6ca4d7c8acc017b7c90260801c5b6000836520000000000016600f0b1315612a4a5770010000162e43f4f831060e02d839a9d16d0260801c5b6000836510000000000016600f0b1315612a7557700100000b1721bcfc99d9f890ea069117630260801c5b6000836508000000000016600f0b1315612aa05770010000058b90cf1e6d97f9ca14dbcc16280260801c5b6000836504000000000016600f0b1315612acb577001000002c5c863b73f016468f6bac5ca2b0260801c5b6000836502000000000016600f0b1315612af657700100000162e430e5a18f6119e3c02282a50260801c5b6000836501000000000016600f0b1315612b21577001000000b1721835514b86e6d96efd1bfe0260801c5b60008364800000000016600f0b1315612b4b57700100000058b90c0b48c6be5df846c5b2ef0260801c5b60008364400000000016600f0b1315612b755770010000002c5c8601cc6b9e94213c72737a0260801c5b60008364200000000016600f0b1315612b9f577001000000162e42fff037df38aa2b219f060260801c5b60008364100000000016600f0b1315612bc95770010000000b17217fba9c739aa5819f44f90260801c5b60008364080000000016600f0b1315612bf3577001000000058b90bfcdee5acd3c1cedc8230260801c5b60008364040000000016600f0b1315612c1d57700100000002c5c85fe31f35a6a30da1be500260801c5b60008364020000000016600f0b1315612c475770010000000162e42ff0999ce3541b9fffcf0260801c5b600083600160201b16600f0b1315612c7057700100000000b17217f80f4ef5aadda455540260801c5b600083638000000016600f0b1315612c995770010000000058b90bfbf8479bd5a81b51ad0260801c5b600083634000000016600f0b1315612cc2577001000000002c5c85fdf84bd62ae30a74cc0260801c5b600083632000000016600f0b1315612ceb57700100000000162e42fefb2fed257559bdaa0260801c5b600083631000000016600f0b1315612d14577001000000000b17217f7d5a7716bba4a9ae0260801c5b600083630800000016600f0b1315612d3d57700100000000058b90bfbe9ddbac5e109cce0260801c5b600083630400000016600f0b1315612d665770010000000002c5c85fdf4b15de6f17eb0d0260801c5b600083630200000016600f0b1315612d8f577001000000000162e42fefa494f1478fde050260801c5b600083630100000016600f0b1315612db85770010000000000b17217f7d20cf927c8e94c0260801c5b6000836280000016600f0b1315612de0577001000000000058b90bfbe8f71cb4e4b33d0260801c5b6000836240000016600f0b1315612e0857700100000000002c5c85fdf477b662b269450260801c5b6000836220000016600f0b1315612e305770010000000000162e42fefa3ae53369388c0260801c5b6000836210000016600f0b1315612e5857700100000000000b17217f7d1d351a389d400260801c5b6000836208000016600f0b1315612e805770010000000000058b90bfbe8e8b2d3d4ede0260801c5b6000836204000016600f0b1315612ea8577001000000000002c5c85fdf4741bea6e77e0260801c5b6000836202000016600f0b1315612ed057700100000000000162e42fefa39fe95583c20260801c5b6000836201000016600f0b1315612ef8577001000000000000b17217f7d1cfb72b45e10260801c5b60008361800016600f0b1315612f1f57700100000000000058b90bfbe8e7cc35c3f00260801c5b60008361400016600f0b1315612f465770010000000000002c5c85fdf473e242ea380260801c5b60008361200016600f0b1315612f6d577001000000000000162e42fefa39f02b772c0260801c5b60008361100016600f0b1315612f945770010000000000000b17217f7d1cf7d83c1a0260801c5b60008361080016600f0b1315612fbb577001000000000000058b90bfbe8e7bdcbe2e0260801c5b60008361040016600f0b1315612fe257700100000000000002c5c85fdf473dea871f0260801c5b60008361020016600f0b13156130095770010000000000000162e42fefa39ef44d910260801c5b60008361010016600f0b131561303057700100000000000000b17217f7d1cf79e9490260801c5b600083608016600f0b13156130565770010000000000000058b90bfbe8e7bce5440260801c5b600083604016600f0b131561307c577001000000000000002c5c85fdf473de6eca0260801c5b600083602016600f0b13156130a257700100000000000000162e42fefa39ef366f0260801c5b600083601016600f0b13156130c8577001000000000000000b17217f7d1cf79afa0260801c5b600083600816600f0b13156130ee57700100000000000000058b90bfbe8e7bcd6d0260801c5b600083600416600f0b13156131145770010000000000000002c5c85fdf473de6b20260801c5b600083600216600f0b131561313a577001000000000000000162e42fefa39ef3580260801c5b600083600116600f0b13156131605770010000000000000000b17217f7d1cf79ab0260801c5b600f83810b60401d603f03900b1c60016001607f1b03811115610a3457600080fd5b3b151590565b60608315613197575081611467565b8251156131a75782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156131f15781810151838201526020016131d9565b50505050905090810190601f16801561321e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6040518060c0016040528060006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000151581525090565b604080516060810182526000808252602082018190529181019190915290565b60405180606001604052806000815260200160008152602001600081525090565b803563ffffffff8116811461080657600080fd5b6000602082840312156132d3578081fd5b815161146781613899565b600080604083850312156132f0578081fd5b82356132fb81613899565b946020939093013593505050565b60008060006060848603121561331d578081fd5b833561332881613899565b95602085013595506040909401359392505050565b60008060008060808587031215613352578081fd5b843561335d81613899565b966020860135965060408601359560600135945092505050565b600060208284031215613388578081fd5b5035919050565b6000602082840312156133a0578081fd5b5051919050565b600080604083850312156133b9578182fd5b50508035926020909101359150565b6000806000606084860312156133dc578283fd5b833592506133ec602085016132ae565b91506133fa604085016132ae565b90509250925092565b8051825260208082015190830152604090810151910152565b60609290921b6bffffffffffffffffffffffff19168252601482015260340190565b6001600160a01b0391909116815260200190565b6001600160a01b039690961686526020860194909452604085019290925260608401526080830152151560a082015260c00190565b901515815260200190565b600f9190910b815260200190565b602080825260099082015268139bdd08189bdd5b9960ba1b604082015260600190565b6020808252600e908201526d2737ba1032b737bab3b4102a2c9960911b604082015260600190565b602080825260099082015268054696d6520697320360bc1b604082015260600190565b6020808252600c908201526b09cdee840cadcdeeaced040b60a31b604082015260600190565b6020808252600c908201526b139bdd08195b9bdd59da081360a21b604082015260600190565b6020808252600a9082015269044656c746120697320360b41b604082015260600190565b6020808252600990820152684e6f74206e6f6e636560b81b604082015260600190565b6020808252600e908201526d20b137bb329036b0bc10313ab93760911b604082015260600190565b6020808252600e908201526d4e6f7420656e6f7567682054583160901b604082015260600190565b6020808252600b908201526a0537472696b6520697320360ac1b604082015260600190565b6020808252600990820152682737ba1037bbb732b960b91b604082015260600190565b6020808252600f908201526e141bdcda5d1a5bdb881b1bd8dad959608a1b604082015260600190565b60208082526011908201527f496e76616c696420696e76617269616e74000000000000000000000000000000604082015260600190565b60208082526013908201527f416c726561647920696e697469616c697a656400000000000000000000000000604082015260600190565b6020808252600c908201526b4e6f7420656e6f756768205960a01b604082015260600190565b60208082526014908201527f4e6f7420656e6f75676820592072656d6f766564000000000000000000000000604082015260600190565b6020808252600a908201526905369676d6120697320360b41b604082015260600190565b60208082526010908201526f151bdbc81b5d58da081648185919195960821b604082015260600190565b60608101610a348284613403565b8151815260208083015163ffffffff90811691830191909152604092830151169181019190915260600190565b600060c0820190506001600160a01b0383511682526020830151602083015260408301516040830152606083015160608301526080830151608083015260a0830151151560a083015292915050565b81546001600160a01b031681526001820154602082015260028201546040820152600382015460608201526004820154608082015260059091015460ff16151560a082015260c00190565b90815260200190565b918252602082015260400190565b9283526020830191909152604082015260600190565b92835263ffffffff918216602084015216604082015260600190565b6001600160a01b03811681146138ae57600080fd5b5056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212201db2cb6487d57d37de651f0761be05f5c8113138d15639746507ca41d407066464736f6c63430007060033",
  "devdoc": {
  "kind": "dev",
  "methods": {
  "addX(address,uint256,uint256,uint256)": {
  "returns": {
  "_0": "Amount of Y removed."
  }
  },
  "getOutputAmount(uint256)": {
  "details": "R1 = x, R2 = y"
  },
  "removeX(address,uint256,uint256,uint256)": {
  "returns": {
  "_0": "Amount of Y added."
  }
  }
  },
  "version": 1
  },
  "userdoc": {
  "kind": "user",
  "methods": {
  "_getInputR2(uint256)": {
  "notice": "Fetches a new R2 from a decreased R1."
  },
  "_getOutputR2(uint256)": {
  "notice": "Fetches a new R2 from an increased R1. F(R1)."
  },
  "_update(uint256,uint256)": {
  "notice": "Updates R to new values for X and Y."
  },
  "addX(address,uint256,uint256,uint256)": {
  "notice": "Updates the reserves after adding X and removing Y."
  },
  "getInputAmount(uint256)": {
  "notice": "Fetches the amount of y which must enter the R2 to preserve the invariant."
  },
  "getOutputAmount(uint256)": {
  "notice": "Fetches the amount of y which must leave the R2 to preserve the invariant."
  },
  "removeX(address,uint256,uint256,uint256)": {
  "notice": "Updates the reserves after removing X and adding Y."
  }
  },
  "version": 1
  },
  "storageLayout": {
  "storage": [
  {
  "astId": 4572,
  "contract": "contracts/PrimitiveEngine.sol:PrimitiveEngine",
  "label": "accumulator",
  "offset": 0,
  "slot": "0",
  "type": "t_struct(Accumulator)4553_storage"
  },
  {
  "astId": 4574,
  "contract": "contracts/PrimitiveEngine.sol:PrimitiveEngine",
  "label": "calibration",
  "offset": 0,
  "slot": "3",
  "type": "t_struct(Calibration)4539_storage"
  },
  {
  "astId": 4576,
  "contract": "contracts/PrimitiveEngine.sol:PrimitiveEngine",
  "label": "capital",
  "offset": 0,
  "slot": "5",
  "type": "t_struct(Capital)4546_storage"
  },
  {
  "astId": 4578,
  "contract": "contracts/PrimitiveEngine.sol:PrimitiveEngine",
  "label": "activePosition",
  "offset": 0,
  "slot": "8",
  "type": "t_struct(Position)4566_storage"
  },
  {
  "astId": 4582,
  "contract": "contracts/PrimitiveEngine.sol:PrimitiveEngine",
  "label": "positions",
  "offset": 0,
  "slot": "14",
  "type": "t_mapping(t_bytes32,t_struct(Position)4566_storage)"
  }
  ],
  "types": {
  "t_address": {
  "encoding": "inplace",
  "label": "address",
  "numberOfBytes": "20"
  },
  "t_bool": {
  "encoding": "inplace",
  "label": "bool",
  "numberOfBytes": "1"
  },
  "t_bytes32": {
  "encoding": "inplace",
  "label": "bytes32",
  "numberOfBytes": "32"
  },
  "t_mapping(t_bytes32,t_struct(Position)4566_storage)": {
  "encoding": "mapping",
  "key": "t_bytes32",
  "label": "mapping(bytes32 => struct PrimitiveEngine.Position)",
  "numberOfBytes": "32",
  "value": "t_struct(Position)4566_storage"
  },
  "t_struct(Accumulator)4553_storage": {
  "encoding": "inplace",
  "label": "struct PrimitiveEngine.Accumulator",
  "members": [
  {
  "astId": 4548,
  "contract": "contracts/PrimitiveEngine.sol:PrimitiveEngine",
  "label": "ARX1",
  "offset": 0,
  "slot": "0",
  "type": "t_uint256"
  },
  {
  "astId": 4550,
  "contract": "contracts/PrimitiveEngine.sol:PrimitiveEngine",
  "label": "ARX2",
  "offset": 0,
  "slot": "1",
  "type": "t_uint256"
  },
  {
  "astId": 4552,
  "contract": "contracts/PrimitiveEngine.sol:PrimitiveEngine",
  "label": "blockNumberLast",
  "offset": 0,
  "slot": "2",
  "type": "t_uint256"
  }
  ],
  "numberOfBytes": "96"
  },
  "t_struct(Calibration)4539_storage": {
  "encoding": "inplace",
  "label": "struct PrimitiveEngine.Calibration",
  "members": [
  {
  "astId": 4534,
  "contract": "contracts/PrimitiveEngine.sol:PrimitiveEngine",
  "label": "strike",
  "offset": 0,
  "slot": "0",
  "type": "t_uint256"
  },
  {
  "astId": 4536,
  "contract": "contracts/PrimitiveEngine.sol:PrimitiveEngine",
  "label": "sigma",
  "offset": 0,
  "slot": "1",
  "type": "t_uint32"
  },
  {
  "astId": 4538,
  "contract": "contracts/PrimitiveEngine.sol:PrimitiveEngine",
  "label": "time",
  "offset": 4,
  "slot": "1",
  "type": "t_uint32"
  }
  ],
  "numberOfBytes": "64"
  },
  "t_struct(Capital)4546_storage": {
  "encoding": "inplace",
  "label": "struct PrimitiveEngine.Capital",
  "members": [
  {
  "astId": 4541,
  "contract": "contracts/PrimitiveEngine.sol:PrimitiveEngine",
  "label": "RX1",
  "offset": 0,
  "slot": "0",
  "type": "t_uint256"
  },
  {
  "astId": 4543,
  "contract": "contracts/PrimitiveEngine.sol:PrimitiveEngine",
  "label": "RX2",
  "offset": 0,
  "slot": "1",
  "type": "t_uint256"
  },
  {
  "astId": 4545,
  "contract": "contracts/PrimitiveEngine.sol:PrimitiveEngine",
  "label": "liquidity",
  "offset": 0,
  "slot": "2",
  "type": "t_uint256"
  }
  ],
  "numberOfBytes": "96"
  },
  "t_struct(Position)4566_storage": {
  "encoding": "inplace",
  "label": "struct PrimitiveEngine.Position",
  "members": [
  {
  "astId": 4555,
  "contract": "contracts/PrimitiveEngine.sol:PrimitiveEngine",
  "label": "owner",
  "offset": 0,
  "slot": "0",
  "type": "t_address"
  },
  {
  "astId": 4557,
  "contract": "contracts/PrimitiveEngine.sol:PrimitiveEngine",
  "label": "nonce",
  "offset": 0,
  "slot": "1",
  "type": "t_uint256"
  },
  {
  "astId": 4559,
  "contract": "contracts/PrimitiveEngine.sol:PrimitiveEngine",
  "label": "BX1",
  "offset": 0,
  "slot": "2",
  "type": "t_uint256"
  },
  {
  "astId": 4561,
  "contract": "contracts/PrimitiveEngine.sol:PrimitiveEngine",
  "label": "BY2",
  "offset": 0,
  "slot": "3",
  "type": "t_uint256"
  },
  {
  "astId": 4563,
  "contract": "contracts/PrimitiveEngine.sol:PrimitiveEngine",
  "label": "liquidity",
  "offset": 0,
  "slot": "4",
  "type": "t_uint256"
  },
  {
  "astId": 4565,
  "contract": "contracts/PrimitiveEngine.sol:PrimitiveEngine",
  "label": "unlocked",
  "offset": 0,
  "slot": "5",
  "type": "t_bool"
  }
  ],
  "numberOfBytes": "192"
  },
  "t_uint256": {
  "encoding": "inplace",
  "label": "uint256",
  "numberOfBytes": "32"
  },
  "t_uint32": {
  "encoding": "inplace",
  "label": "uint32",
  "numberOfBytes": "4"
  }
  }
  }
  }